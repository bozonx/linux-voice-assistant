/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: stt.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace speechkit.stt.v3 {
    export enum CodeType {
        /** @deprecated*/
        CODE_TYPE_UNSPECIFIED = 0,
        WORKING = 1,
        WARNING = 2,
        CLOSED = 3
    }
    export class Struct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fields?: Map<string, Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
            if (!this.fields)
                this.fields = new Map();
        }
        get fields() {
            return pb_1.Message.getField(this, 1) as any as Map<string, Value>;
        }
        set fields(value: Map<string, Value>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            fields?: {
                [key: string]: ReturnType<typeof Value.prototype.toObject>;
            };
        }): Struct {
            const message = new Struct({});
            if (typeof data.fields == "object") {
                message.fields = new Map(Object.entries(data.fields).map(([key, value]) => [key, Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                fields?: {
                    [key: string]: ReturnType<typeof Value.prototype.toObject>;
                };
            } = {};
            if (this.fields != null) {
                data.fields = (Object.fromEntries)((Array.from)(this.fields).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.fields) {
                writer.writeMessage(1, this.fields, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Struct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Struct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fields as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Struct {
            return Struct.deserialize(bytes);
        }
    }
    export class Value extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            bool_value?: boolean;
            number_value?: never;
            string_value?: never;
            struct_value?: never;
            list_value?: never;
        } | {
            bool_value?: never;
            number_value?: number;
            string_value?: never;
            struct_value?: never;
            list_value?: never;
        } | {
            bool_value?: never;
            number_value?: never;
            string_value?: string;
            struct_value?: never;
            list_value?: never;
        } | {
            bool_value?: never;
            number_value?: never;
            string_value?: never;
            struct_value?: Struct;
            list_value?: never;
        } | {
            bool_value?: never;
            number_value?: never;
            string_value?: never;
            struct_value?: never;
            list_value?: ListValue;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("number_value" in data && data.number_value != undefined) {
                    this.number_value = data.number_value;
                }
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("struct_value" in data && data.struct_value != undefined) {
                    this.struct_value = data.struct_value;
                }
                if ("list_value" in data && data.list_value != undefined) {
                    this.list_value = data.list_value;
                }
            }
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get number_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set number_value(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_number_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set string_value(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get struct_value() {
            return pb_1.Message.getWrapperField(this, Struct, 4) as Struct;
        }
        set struct_value(value: Struct) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_struct_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get list_value() {
            return pb_1.Message.getWrapperField(this, ListValue, 5) as ListValue;
        }
        set list_value(value: ListValue) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_list_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "bool_value" | "number_value" | "string_value" | "struct_value" | "list_value";
            } = {
                0: "none",
                1: "bool_value",
                2: "number_value",
                3: "string_value",
                4: "struct_value",
                5: "list_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            bool_value?: boolean;
            number_value?: number;
            string_value?: string;
            struct_value?: ReturnType<typeof Struct.prototype.toObject>;
            list_value?: ReturnType<typeof ListValue.prototype.toObject>;
        }): Value {
            const message = new Value({});
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.number_value != null) {
                message.number_value = data.number_value;
            }
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.struct_value != null) {
                message.struct_value = Struct.fromObject(data.struct_value);
            }
            if (data.list_value != null) {
                message.list_value = ListValue.fromObject(data.list_value);
            }
            return message;
        }
        toObject() {
            const data: {
                bool_value?: boolean;
                number_value?: number;
                string_value?: string;
                struct_value?: ReturnType<typeof Struct.prototype.toObject>;
                list_value?: ReturnType<typeof ListValue.prototype.toObject>;
            } = {};
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.number_value != null) {
                data.number_value = this.number_value;
            }
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.struct_value != null) {
                data.struct_value = this.struct_value.toObject();
            }
            if (this.list_value != null) {
                data.list_value = this.list_value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_bool_value)
                writer.writeBool(1, this.bool_value);
            if (this.has_number_value)
                writer.writeDouble(2, this.number_value);
            if (this.has_string_value)
                writer.writeString(3, this.string_value);
            if (this.has_struct_value)
                writer.writeMessage(4, this.struct_value, () => this.struct_value.serialize(writer));
            if (this.has_list_value)
                writer.writeMessage(5, this.list_value, () => this.list_value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Value {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Value();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bool_value = reader.readBool();
                        break;
                    case 2:
                        message.number_value = reader.readDouble();
                        break;
                    case 3:
                        message.string_value = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.struct_value, () => message.struct_value = Struct.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.list_value, () => message.list_value = ListValue.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Value {
            return Value.deserialize(bytes);
        }
    }
    export class ListValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: Value[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, Value, 1) as Value[];
        }
        set values(value: Value[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            values?: ReturnType<typeof Value.prototype.toObject>[];
        }): ListValue {
            const message = new ListValue({});
            if (data.values != null) {
                message.values = data.values.map(item => Value.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                values?: ReturnType<typeof Value.prototype.toObject>[];
            } = {};
            if (this.values != null) {
                data.values = this.values.map((item: Value) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedMessage(1, this.values, (item: Value) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Value.deserialize(reader), Value));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListValue {
            return ListValue.deserialize(bytes);
        }
    }
    export class TextNormalizationOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text_normalization?: TextNormalizationOptions.TextNormalization;
            profanity_filter?: boolean;
            literature_text?: boolean;
            phone_formatting_mode?: TextNormalizationOptions.PhoneFormattingMode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text_normalization" in data && data.text_normalization != undefined) {
                    this.text_normalization = data.text_normalization;
                }
                if ("profanity_filter" in data && data.profanity_filter != undefined) {
                    this.profanity_filter = data.profanity_filter;
                }
                if ("literature_text" in data && data.literature_text != undefined) {
                    this.literature_text = data.literature_text;
                }
                if ("phone_formatting_mode" in data && data.phone_formatting_mode != undefined) {
                    this.phone_formatting_mode = data.phone_formatting_mode;
                }
            }
        }
        get text_normalization() {
            return pb_1.Message.getFieldWithDefault(this, 1, TextNormalizationOptions.TextNormalization.TEXT_NORMALIZATION_UNSPECIFIED) as TextNormalizationOptions.TextNormalization;
        }
        set text_normalization(value: TextNormalizationOptions.TextNormalization) {
            pb_1.Message.setField(this, 1, value);
        }
        get profanity_filter() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set profanity_filter(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get literature_text() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set literature_text(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get phone_formatting_mode() {
            return pb_1.Message.getFieldWithDefault(this, 4, TextNormalizationOptions.PhoneFormattingMode.PHONE_FORMATTING_MODE_UNSPECIFIED) as TextNormalizationOptions.PhoneFormattingMode;
        }
        set phone_formatting_mode(value: TextNormalizationOptions.PhoneFormattingMode) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            text_normalization?: TextNormalizationOptions.TextNormalization;
            profanity_filter?: boolean;
            literature_text?: boolean;
            phone_formatting_mode?: TextNormalizationOptions.PhoneFormattingMode;
        }): TextNormalizationOptions {
            const message = new TextNormalizationOptions({});
            if (data.text_normalization != null) {
                message.text_normalization = data.text_normalization;
            }
            if (data.profanity_filter != null) {
                message.profanity_filter = data.profanity_filter;
            }
            if (data.literature_text != null) {
                message.literature_text = data.literature_text;
            }
            if (data.phone_formatting_mode != null) {
                message.phone_formatting_mode = data.phone_formatting_mode;
            }
            return message;
        }
        toObject() {
            const data: {
                text_normalization?: TextNormalizationOptions.TextNormalization;
                profanity_filter?: boolean;
                literature_text?: boolean;
                phone_formatting_mode?: TextNormalizationOptions.PhoneFormattingMode;
            } = {};
            if (this.text_normalization != null) {
                data.text_normalization = this.text_normalization;
            }
            if (this.profanity_filter != null) {
                data.profanity_filter = this.profanity_filter;
            }
            if (this.literature_text != null) {
                data.literature_text = this.literature_text;
            }
            if (this.phone_formatting_mode != null) {
                data.phone_formatting_mode = this.phone_formatting_mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text_normalization != TextNormalizationOptions.TextNormalization.TEXT_NORMALIZATION_UNSPECIFIED)
                writer.writeEnum(1, this.text_normalization);
            if (this.profanity_filter != false)
                writer.writeBool(2, this.profanity_filter);
            if (this.literature_text != false)
                writer.writeBool(3, this.literature_text);
            if (this.phone_formatting_mode != TextNormalizationOptions.PhoneFormattingMode.PHONE_FORMATTING_MODE_UNSPECIFIED)
                writer.writeEnum(4, this.phone_formatting_mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TextNormalizationOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextNormalizationOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text_normalization = reader.readEnum();
                        break;
                    case 2:
                        message.profanity_filter = reader.readBool();
                        break;
                    case 3:
                        message.literature_text = reader.readBool();
                        break;
                    case 4:
                        message.phone_formatting_mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TextNormalizationOptions {
            return TextNormalizationOptions.deserialize(bytes);
        }
    }
    export namespace TextNormalizationOptions {
        export enum TextNormalization {
            TEXT_NORMALIZATION_UNSPECIFIED = 0,
            TEXT_NORMALIZATION_ENABLED = 1,
            TEXT_NORMALIZATION_DISABLED = 2
        }
        export enum PhoneFormattingMode {
            PHONE_FORMATTING_MODE_UNSPECIFIED = 0,
            PHONE_FORMATTING_MODE_DISABLED = 1
        }
    }
    export class DefaultEouClassifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: DefaultEouClassifier.EouSensitivity;
            max_pause_between_words_hint_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("max_pause_between_words_hint_ms" in data && data.max_pause_between_words_hint_ms != undefined) {
                    this.max_pause_between_words_hint_ms = data.max_pause_between_words_hint_ms;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, DefaultEouClassifier.EouSensitivity.EOU_SENSITIVITY_UNSPECIFIED) as DefaultEouClassifier.EouSensitivity;
        }
        set type(value: DefaultEouClassifier.EouSensitivity) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_pause_between_words_hint_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_pause_between_words_hint_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: DefaultEouClassifier.EouSensitivity;
            max_pause_between_words_hint_ms?: number;
        }): DefaultEouClassifier {
            const message = new DefaultEouClassifier({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.max_pause_between_words_hint_ms != null) {
                message.max_pause_between_words_hint_ms = data.max_pause_between_words_hint_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: DefaultEouClassifier.EouSensitivity;
                max_pause_between_words_hint_ms?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.max_pause_between_words_hint_ms != null) {
                data.max_pause_between_words_hint_ms = this.max_pause_between_words_hint_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != DefaultEouClassifier.EouSensitivity.EOU_SENSITIVITY_UNSPECIFIED)
                writer.writeEnum(1, this.type);
            if (this.max_pause_between_words_hint_ms != 0)
                writer.writeInt64(2, this.max_pause_between_words_hint_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefaultEouClassifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefaultEouClassifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.max_pause_between_words_hint_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefaultEouClassifier {
            return DefaultEouClassifier.deserialize(bytes);
        }
    }
    export namespace DefaultEouClassifier {
        export enum EouSensitivity {
            EOU_SENSITIVITY_UNSPECIFIED = 0,
            DEFAULT = 1,
            HIGH = 2
        }
    }
    export class ExternalEouClassifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ExternalEouClassifier {
            const message = new ExternalEouClassifier({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExternalEouClassifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExternalEouClassifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExternalEouClassifier {
            return ExternalEouClassifier.deserialize(bytes);
        }
    }
    export class EouClassifierOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            default_classifier?: DefaultEouClassifier;
            external_classifier?: never;
        } | {
            default_classifier?: never;
            external_classifier?: ExternalEouClassifier;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("default_classifier" in data && data.default_classifier != undefined) {
                    this.default_classifier = data.default_classifier;
                }
                if ("external_classifier" in data && data.external_classifier != undefined) {
                    this.external_classifier = data.external_classifier;
                }
            }
        }
        get default_classifier() {
            return pb_1.Message.getWrapperField(this, DefaultEouClassifier, 1) as DefaultEouClassifier;
        }
        set default_classifier(value: DefaultEouClassifier) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_default_classifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get external_classifier() {
            return pb_1.Message.getWrapperField(this, ExternalEouClassifier, 2) as ExternalEouClassifier;
        }
        set external_classifier(value: ExternalEouClassifier) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_external_classifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Classifier() {
            const cases: {
                [index: number]: "none" | "default_classifier" | "external_classifier";
            } = {
                0: "none",
                1: "default_classifier",
                2: "external_classifier"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            default_classifier?: ReturnType<typeof DefaultEouClassifier.prototype.toObject>;
            external_classifier?: ReturnType<typeof ExternalEouClassifier.prototype.toObject>;
        }): EouClassifierOptions {
            const message = new EouClassifierOptions({});
            if (data.default_classifier != null) {
                message.default_classifier = DefaultEouClassifier.fromObject(data.default_classifier);
            }
            if (data.external_classifier != null) {
                message.external_classifier = ExternalEouClassifier.fromObject(data.external_classifier);
            }
            return message;
        }
        toObject() {
            const data: {
                default_classifier?: ReturnType<typeof DefaultEouClassifier.prototype.toObject>;
                external_classifier?: ReturnType<typeof ExternalEouClassifier.prototype.toObject>;
            } = {};
            if (this.default_classifier != null) {
                data.default_classifier = this.default_classifier.toObject();
            }
            if (this.external_classifier != null) {
                data.external_classifier = this.external_classifier.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_default_classifier)
                writer.writeMessage(1, this.default_classifier, () => this.default_classifier.serialize(writer));
            if (this.has_external_classifier)
                writer.writeMessage(2, this.external_classifier, () => this.external_classifier.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EouClassifierOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EouClassifierOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.default_classifier, () => message.default_classifier = DefaultEouClassifier.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.external_classifier, () => message.external_classifier = ExternalEouClassifier.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EouClassifierOptions {
            return EouClassifierOptions.deserialize(bytes);
        }
    }
    export class RecognitionClassifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classifier?: string;
            triggers?: RecognitionClassifier.TriggerType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classifier" in data && data.classifier != undefined) {
                    this.classifier = data.classifier;
                }
                if ("triggers" in data && data.triggers != undefined) {
                    this.triggers = data.triggers;
                }
            }
        }
        get classifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set classifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get triggers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as RecognitionClassifier.TriggerType[];
        }
        set triggers(value: RecognitionClassifier.TriggerType[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            classifier?: string;
            triggers?: RecognitionClassifier.TriggerType[];
        }): RecognitionClassifier {
            const message = new RecognitionClassifier({});
            if (data.classifier != null) {
                message.classifier = data.classifier;
            }
            if (data.triggers != null) {
                message.triggers = data.triggers;
            }
            return message;
        }
        toObject() {
            const data: {
                classifier?: string;
                triggers?: RecognitionClassifier.TriggerType[];
            } = {};
            if (this.classifier != null) {
                data.classifier = this.classifier;
            }
            if (this.triggers != null) {
                data.triggers = this.triggers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classifier.length)
                writer.writeString(1, this.classifier);
            if (this.triggers.length)
                writer.writePackedEnum(2, this.triggers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionClassifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionClassifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.classifier = reader.readString();
                        break;
                    case 2:
                        message.triggers = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionClassifier {
            return RecognitionClassifier.deserialize(bytes);
        }
    }
    export namespace RecognitionClassifier {
        export enum TriggerType {
            /** @deprecated*/
            TRIGGER_TYPE_UNSPECIFIED = 0,
            ON_UTTERANCE = 1,
            ON_FINAL = 2,
            ON_PARTIAL = 3
        }
    }
    export class RecognitionClassifierOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classifiers?: RecognitionClassifier[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classifiers" in data && data.classifiers != undefined) {
                    this.classifiers = data.classifiers;
                }
            }
        }
        get classifiers() {
            return pb_1.Message.getRepeatedWrapperField(this, RecognitionClassifier, 1) as RecognitionClassifier[];
        }
        set classifiers(value: RecognitionClassifier[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            classifiers?: ReturnType<typeof RecognitionClassifier.prototype.toObject>[];
        }): RecognitionClassifierOptions {
            const message = new RecognitionClassifierOptions({});
            if (data.classifiers != null) {
                message.classifiers = data.classifiers.map(item => RecognitionClassifier.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                classifiers?: ReturnType<typeof RecognitionClassifier.prototype.toObject>[];
            } = {};
            if (this.classifiers != null) {
                data.classifiers = this.classifiers.map((item: RecognitionClassifier) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classifiers.length)
                writer.writeRepeatedMessage(1, this.classifiers, (item: RecognitionClassifier) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionClassifierOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionClassifierOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.classifiers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RecognitionClassifier.deserialize(reader), RecognitionClassifier));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionClassifierOptions {
            return RecognitionClassifierOptions.deserialize(bytes);
        }
    }
    export class SpeechAnalysisOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enable_speaker_analysis?: boolean;
            enable_conversation_analysis?: boolean;
            descriptive_statistics_quantiles?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enable_speaker_analysis" in data && data.enable_speaker_analysis != undefined) {
                    this.enable_speaker_analysis = data.enable_speaker_analysis;
                }
                if ("enable_conversation_analysis" in data && data.enable_conversation_analysis != undefined) {
                    this.enable_conversation_analysis = data.enable_conversation_analysis;
                }
                if ("descriptive_statistics_quantiles" in data && data.descriptive_statistics_quantiles != undefined) {
                    this.descriptive_statistics_quantiles = data.descriptive_statistics_quantiles;
                }
            }
        }
        get enable_speaker_analysis() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enable_speaker_analysis(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get enable_conversation_analysis() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set enable_conversation_analysis(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get descriptive_statistics_quantiles() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set descriptive_statistics_quantiles(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            enable_speaker_analysis?: boolean;
            enable_conversation_analysis?: boolean;
            descriptive_statistics_quantiles?: number[];
        }): SpeechAnalysisOptions {
            const message = new SpeechAnalysisOptions({});
            if (data.enable_speaker_analysis != null) {
                message.enable_speaker_analysis = data.enable_speaker_analysis;
            }
            if (data.enable_conversation_analysis != null) {
                message.enable_conversation_analysis = data.enable_conversation_analysis;
            }
            if (data.descriptive_statistics_quantiles != null) {
                message.descriptive_statistics_quantiles = data.descriptive_statistics_quantiles;
            }
            return message;
        }
        toObject() {
            const data: {
                enable_speaker_analysis?: boolean;
                enable_conversation_analysis?: boolean;
                descriptive_statistics_quantiles?: number[];
            } = {};
            if (this.enable_speaker_analysis != null) {
                data.enable_speaker_analysis = this.enable_speaker_analysis;
            }
            if (this.enable_conversation_analysis != null) {
                data.enable_conversation_analysis = this.enable_conversation_analysis;
            }
            if (this.descriptive_statistics_quantiles != null) {
                data.descriptive_statistics_quantiles = this.descriptive_statistics_quantiles;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enable_speaker_analysis != false)
                writer.writeBool(1, this.enable_speaker_analysis);
            if (this.enable_conversation_analysis != false)
                writer.writeBool(2, this.enable_conversation_analysis);
            if (this.descriptive_statistics_quantiles.length)
                writer.writePackedDouble(3, this.descriptive_statistics_quantiles);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeechAnalysisOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpeechAnalysisOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enable_speaker_analysis = reader.readBool();
                        break;
                    case 2:
                        message.enable_conversation_analysis = reader.readBool();
                        break;
                    case 3:
                        message.descriptive_statistics_quantiles = reader.readPackedDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpeechAnalysisOptions {
            return SpeechAnalysisOptions.deserialize(bytes);
        }
    }
    export class RawAudio extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            audio_encoding?: RawAudio.AudioEncoding;
            sample_rate_hertz?: number;
            audio_channel_count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("audio_encoding" in data && data.audio_encoding != undefined) {
                    this.audio_encoding = data.audio_encoding;
                }
                if ("sample_rate_hertz" in data && data.sample_rate_hertz != undefined) {
                    this.sample_rate_hertz = data.sample_rate_hertz;
                }
                if ("audio_channel_count" in data && data.audio_channel_count != undefined) {
                    this.audio_channel_count = data.audio_channel_count;
                }
            }
        }
        get audio_encoding() {
            return pb_1.Message.getFieldWithDefault(this, 1, RawAudio.AudioEncoding.AUDIO_ENCODING_UNSPECIFIED) as RawAudio.AudioEncoding;
        }
        set audio_encoding(value: RawAudio.AudioEncoding) {
            pb_1.Message.setField(this, 1, value);
        }
        get sample_rate_hertz() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sample_rate_hertz(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get audio_channel_count() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set audio_channel_count(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            audio_encoding?: RawAudio.AudioEncoding;
            sample_rate_hertz?: number;
            audio_channel_count?: number;
        }): RawAudio {
            const message = new RawAudio({});
            if (data.audio_encoding != null) {
                message.audio_encoding = data.audio_encoding;
            }
            if (data.sample_rate_hertz != null) {
                message.sample_rate_hertz = data.sample_rate_hertz;
            }
            if (data.audio_channel_count != null) {
                message.audio_channel_count = data.audio_channel_count;
            }
            return message;
        }
        toObject() {
            const data: {
                audio_encoding?: RawAudio.AudioEncoding;
                sample_rate_hertz?: number;
                audio_channel_count?: number;
            } = {};
            if (this.audio_encoding != null) {
                data.audio_encoding = this.audio_encoding;
            }
            if (this.sample_rate_hertz != null) {
                data.sample_rate_hertz = this.sample_rate_hertz;
            }
            if (this.audio_channel_count != null) {
                data.audio_channel_count = this.audio_channel_count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.audio_encoding != RawAudio.AudioEncoding.AUDIO_ENCODING_UNSPECIFIED)
                writer.writeEnum(1, this.audio_encoding);
            if (this.sample_rate_hertz != 0)
                writer.writeInt64(2, this.sample_rate_hertz);
            if (this.audio_channel_count != 0)
                writer.writeInt64(3, this.audio_channel_count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawAudio {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawAudio();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.audio_encoding = reader.readEnum();
                        break;
                    case 2:
                        message.sample_rate_hertz = reader.readInt64();
                        break;
                    case 3:
                        message.audio_channel_count = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RawAudio {
            return RawAudio.deserialize(bytes);
        }
    }
    export namespace RawAudio {
        export enum AudioEncoding {
            AUDIO_ENCODING_UNSPECIFIED = 0,
            LINEAR16_PCM = 1
        }
    }
    export class ContainerAudio extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            container_audio_type?: ContainerAudio.ContainerAudioType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("container_audio_type" in data && data.container_audio_type != undefined) {
                    this.container_audio_type = data.container_audio_type;
                }
            }
        }
        get container_audio_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, ContainerAudio.ContainerAudioType.CONTAINER_AUDIO_TYPE_UNSPECIFIED) as ContainerAudio.ContainerAudioType;
        }
        set container_audio_type(value: ContainerAudio.ContainerAudioType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            container_audio_type?: ContainerAudio.ContainerAudioType;
        }): ContainerAudio {
            const message = new ContainerAudio({});
            if (data.container_audio_type != null) {
                message.container_audio_type = data.container_audio_type;
            }
            return message;
        }
        toObject() {
            const data: {
                container_audio_type?: ContainerAudio.ContainerAudioType;
            } = {};
            if (this.container_audio_type != null) {
                data.container_audio_type = this.container_audio_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.container_audio_type != ContainerAudio.ContainerAudioType.CONTAINER_AUDIO_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.container_audio_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContainerAudio {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContainerAudio();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.container_audio_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContainerAudio {
            return ContainerAudio.deserialize(bytes);
        }
    }
    export namespace ContainerAudio {
        export enum ContainerAudioType {
            CONTAINER_AUDIO_TYPE_UNSPECIFIED = 0,
            WAV = 1,
            OGG_OPUS = 2,
            MP3 = 3
        }
    }
    export class AudioFormatOptions extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            raw_audio?: RawAudio;
            container_audio?: never;
        } | {
            raw_audio?: never;
            container_audio?: ContainerAudio;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw_audio" in data && data.raw_audio != undefined) {
                    this.raw_audio = data.raw_audio;
                }
                if ("container_audio" in data && data.container_audio != undefined) {
                    this.container_audio = data.container_audio;
                }
            }
        }
        get raw_audio() {
            return pb_1.Message.getWrapperField(this, RawAudio, 1) as RawAudio;
        }
        set raw_audio(value: RawAudio) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_raw_audio() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get container_audio() {
            return pb_1.Message.getWrapperField(this, ContainerAudio, 2) as ContainerAudio;
        }
        set container_audio(value: ContainerAudio) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_container_audio() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get AudioFormat() {
            const cases: {
                [index: number]: "none" | "raw_audio" | "container_audio";
            } = {
                0: "none",
                1: "raw_audio",
                2: "container_audio"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            raw_audio?: ReturnType<typeof RawAudio.prototype.toObject>;
            container_audio?: ReturnType<typeof ContainerAudio.prototype.toObject>;
        }): AudioFormatOptions {
            const message = new AudioFormatOptions({});
            if (data.raw_audio != null) {
                message.raw_audio = RawAudio.fromObject(data.raw_audio);
            }
            if (data.container_audio != null) {
                message.container_audio = ContainerAudio.fromObject(data.container_audio);
            }
            return message;
        }
        toObject() {
            const data: {
                raw_audio?: ReturnType<typeof RawAudio.prototype.toObject>;
                container_audio?: ReturnType<typeof ContainerAudio.prototype.toObject>;
            } = {};
            if (this.raw_audio != null) {
                data.raw_audio = this.raw_audio.toObject();
            }
            if (this.container_audio != null) {
                data.container_audio = this.container_audio.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_raw_audio)
                writer.writeMessage(1, this.raw_audio, () => this.raw_audio.serialize(writer));
            if (this.has_container_audio)
                writer.writeMessage(2, this.container_audio, () => this.container_audio.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioFormatOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioFormatOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.raw_audio, () => message.raw_audio = RawAudio.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.container_audio, () => message.container_audio = ContainerAudio.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioFormatOptions {
            return AudioFormatOptions.deserialize(bytes);
        }
    }
    export class LanguageRestrictionOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            restriction_type?: LanguageRestrictionOptions.LanguageRestrictionType;
            language_code?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("restriction_type" in data && data.restriction_type != undefined) {
                    this.restriction_type = data.restriction_type;
                }
                if ("language_code" in data && data.language_code != undefined) {
                    this.language_code = data.language_code;
                }
            }
        }
        get restriction_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, LanguageRestrictionOptions.LanguageRestrictionType.LANGUAGE_RESTRICTION_TYPE_UNSPECIFIED) as LanguageRestrictionOptions.LanguageRestrictionType;
        }
        set restriction_type(value: LanguageRestrictionOptions.LanguageRestrictionType) {
            pb_1.Message.setField(this, 1, value);
        }
        get language_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set language_code(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            restriction_type?: LanguageRestrictionOptions.LanguageRestrictionType;
            language_code?: string[];
        }): LanguageRestrictionOptions {
            const message = new LanguageRestrictionOptions({});
            if (data.restriction_type != null) {
                message.restriction_type = data.restriction_type;
            }
            if (data.language_code != null) {
                message.language_code = data.language_code;
            }
            return message;
        }
        toObject() {
            const data: {
                restriction_type?: LanguageRestrictionOptions.LanguageRestrictionType;
                language_code?: string[];
            } = {};
            if (this.restriction_type != null) {
                data.restriction_type = this.restriction_type;
            }
            if (this.language_code != null) {
                data.language_code = this.language_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.restriction_type != LanguageRestrictionOptions.LanguageRestrictionType.LANGUAGE_RESTRICTION_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.restriction_type);
            if (this.language_code.length)
                writer.writeRepeatedString(2, this.language_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LanguageRestrictionOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LanguageRestrictionOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.restriction_type = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LanguageRestrictionOptions {
            return LanguageRestrictionOptions.deserialize(bytes);
        }
    }
    export namespace LanguageRestrictionOptions {
        export enum LanguageRestrictionType {
            LANGUAGE_RESTRICTION_TYPE_UNSPECIFIED = 0,
            WHITELIST = 1,
            BLACKLIST = 2
        }
    }
    export class JsonSchema extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            schema?: Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
            }
        }
        get schema() {
            return pb_1.Message.getWrapperField(this, Struct, 1) as Struct;
        }
        set schema(value: Struct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_schema() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            schema?: ReturnType<typeof Struct.prototype.toObject>;
        }): JsonSchema {
            const message = new JsonSchema({});
            if (data.schema != null) {
                message.schema = Struct.fromObject(data.schema);
            }
            return message;
        }
        toObject() {
            const data: {
                schema?: ReturnType<typeof Struct.prototype.toObject>;
            } = {};
            if (this.schema != null) {
                data.schema = this.schema.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_schema)
                writer.writeMessage(1, this.schema, () => this.schema.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JsonSchema {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JsonSchema();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.schema, () => message.schema = Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JsonSchema {
            return JsonSchema.deserialize(bytes);
        }
    }
    export class SummarizationProperty extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            instruction?: string;
        } & (({
            json_object?: boolean;
            json_schema?: never;
        } | {
            json_object?: never;
            json_schema?: JsonSchema;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("instruction" in data && data.instruction != undefined) {
                    this.instruction = data.instruction;
                }
                if ("json_object" in data && data.json_object != undefined) {
                    this.json_object = data.json_object;
                }
                if ("json_schema" in data && data.json_schema != undefined) {
                    this.json_schema = data.json_schema;
                }
            }
        }
        get instruction() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set instruction(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get json_object() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set json_object(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_json_object() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get json_schema() {
            return pb_1.Message.getWrapperField(this, JsonSchema, 3) as JsonSchema;
        }
        set json_schema(value: JsonSchema) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_json_schema() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ResponseFormat() {
            const cases: {
                [index: number]: "none" | "json_object" | "json_schema";
            } = {
                0: "none",
                2: "json_object",
                3: "json_schema"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            instruction?: string;
            json_object?: boolean;
            json_schema?: ReturnType<typeof JsonSchema.prototype.toObject>;
        }): SummarizationProperty {
            const message = new SummarizationProperty({});
            if (data.instruction != null) {
                message.instruction = data.instruction;
            }
            if (data.json_object != null) {
                message.json_object = data.json_object;
            }
            if (data.json_schema != null) {
                message.json_schema = JsonSchema.fromObject(data.json_schema);
            }
            return message;
        }
        toObject() {
            const data: {
                instruction?: string;
                json_object?: boolean;
                json_schema?: ReturnType<typeof JsonSchema.prototype.toObject>;
            } = {};
            if (this.instruction != null) {
                data.instruction = this.instruction;
            }
            if (this.json_object != null) {
                data.json_object = this.json_object;
            }
            if (this.json_schema != null) {
                data.json_schema = this.json_schema.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.instruction.length)
                writer.writeString(1, this.instruction);
            if (this.has_json_object)
                writer.writeBool(2, this.json_object);
            if (this.has_json_schema)
                writer.writeMessage(3, this.json_schema, () => this.json_schema.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SummarizationProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SummarizationProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.instruction = reader.readString();
                        break;
                    case 2:
                        message.json_object = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.json_schema, () => message.json_schema = JsonSchema.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SummarizationProperty {
            return SummarizationProperty.deserialize(bytes);
        }
    }
    export class SummarizationOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            model_uri?: string;
            properties?: SummarizationProperty[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("model_uri" in data && data.model_uri != undefined) {
                    this.model_uri = data.model_uri;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
        }
        get model_uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set model_uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get properties() {
            return pb_1.Message.getRepeatedWrapperField(this, SummarizationProperty, 2) as SummarizationProperty[];
        }
        set properties(value: SummarizationProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            model_uri?: string;
            properties?: ReturnType<typeof SummarizationProperty.prototype.toObject>[];
        }): SummarizationOptions {
            const message = new SummarizationOptions({});
            if (data.model_uri != null) {
                message.model_uri = data.model_uri;
            }
            if (data.properties != null) {
                message.properties = data.properties.map(item => SummarizationProperty.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                model_uri?: string;
                properties?: ReturnType<typeof SummarizationProperty.prototype.toObject>[];
            } = {};
            if (this.model_uri != null) {
                data.model_uri = this.model_uri;
            }
            if (this.properties != null) {
                data.properties = this.properties.map((item: SummarizationProperty) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.model_uri.length)
                writer.writeString(1, this.model_uri);
            if (this.properties.length)
                writer.writeRepeatedMessage(2, this.properties, (item: SummarizationProperty) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SummarizationOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SummarizationOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.model_uri = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.properties, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SummarizationProperty.deserialize(reader), SummarizationProperty));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SummarizationOptions {
            return SummarizationOptions.deserialize(bytes);
        }
    }
    export class SummarizationPropertyResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            response?: string;
        }): SummarizationPropertyResult {
            const message = new SummarizationPropertyResult({});
            if (data.response != null) {
                message.response = data.response;
            }
            return message;
        }
        toObject() {
            const data: {
                response?: string;
            } = {};
            if (this.response != null) {
                data.response = this.response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.response.length)
                writer.writeString(1, this.response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SummarizationPropertyResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SummarizationPropertyResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.response = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SummarizationPropertyResult {
            return SummarizationPropertyResult.deserialize(bytes);
        }
    }
    export class RecognitionModelOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            model?: string;
            audio_format?: AudioFormatOptions;
            text_normalization?: TextNormalizationOptions;
            language_restriction?: LanguageRestrictionOptions;
            audio_processing_type?: RecognitionModelOptions.AudioProcessingType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("model" in data && data.model != undefined) {
                    this.model = data.model;
                }
                if ("audio_format" in data && data.audio_format != undefined) {
                    this.audio_format = data.audio_format;
                }
                if ("text_normalization" in data && data.text_normalization != undefined) {
                    this.text_normalization = data.text_normalization;
                }
                if ("language_restriction" in data && data.language_restriction != undefined) {
                    this.language_restriction = data.language_restriction;
                }
                if ("audio_processing_type" in data && data.audio_processing_type != undefined) {
                    this.audio_processing_type = data.audio_processing_type;
                }
            }
        }
        get model() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set model(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get audio_format() {
            return pb_1.Message.getWrapperField(this, AudioFormatOptions, 2) as AudioFormatOptions;
        }
        set audio_format(value: AudioFormatOptions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_audio_format() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get text_normalization() {
            return pb_1.Message.getWrapperField(this, TextNormalizationOptions, 3) as TextNormalizationOptions;
        }
        set text_normalization(value: TextNormalizationOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_text_normalization() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get language_restriction() {
            return pb_1.Message.getWrapperField(this, LanguageRestrictionOptions, 4) as LanguageRestrictionOptions;
        }
        set language_restriction(value: LanguageRestrictionOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_language_restriction() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get audio_processing_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, RecognitionModelOptions.AudioProcessingType.AUDIO_PROCESSING_TYPE_UNSPECIFIED) as RecognitionModelOptions.AudioProcessingType;
        }
        set audio_processing_type(value: RecognitionModelOptions.AudioProcessingType) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            model?: string;
            audio_format?: ReturnType<typeof AudioFormatOptions.prototype.toObject>;
            text_normalization?: ReturnType<typeof TextNormalizationOptions.prototype.toObject>;
            language_restriction?: ReturnType<typeof LanguageRestrictionOptions.prototype.toObject>;
            audio_processing_type?: RecognitionModelOptions.AudioProcessingType;
        }): RecognitionModelOptions {
            const message = new RecognitionModelOptions({});
            if (data.model != null) {
                message.model = data.model;
            }
            if (data.audio_format != null) {
                message.audio_format = AudioFormatOptions.fromObject(data.audio_format);
            }
            if (data.text_normalization != null) {
                message.text_normalization = TextNormalizationOptions.fromObject(data.text_normalization);
            }
            if (data.language_restriction != null) {
                message.language_restriction = LanguageRestrictionOptions.fromObject(data.language_restriction);
            }
            if (data.audio_processing_type != null) {
                message.audio_processing_type = data.audio_processing_type;
            }
            return message;
        }
        toObject() {
            const data: {
                model?: string;
                audio_format?: ReturnType<typeof AudioFormatOptions.prototype.toObject>;
                text_normalization?: ReturnType<typeof TextNormalizationOptions.prototype.toObject>;
                language_restriction?: ReturnType<typeof LanguageRestrictionOptions.prototype.toObject>;
                audio_processing_type?: RecognitionModelOptions.AudioProcessingType;
            } = {};
            if (this.model != null) {
                data.model = this.model;
            }
            if (this.audio_format != null) {
                data.audio_format = this.audio_format.toObject();
            }
            if (this.text_normalization != null) {
                data.text_normalization = this.text_normalization.toObject();
            }
            if (this.language_restriction != null) {
                data.language_restriction = this.language_restriction.toObject();
            }
            if (this.audio_processing_type != null) {
                data.audio_processing_type = this.audio_processing_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.model.length)
                writer.writeString(1, this.model);
            if (this.has_audio_format)
                writer.writeMessage(2, this.audio_format, () => this.audio_format.serialize(writer));
            if (this.has_text_normalization)
                writer.writeMessage(3, this.text_normalization, () => this.text_normalization.serialize(writer));
            if (this.has_language_restriction)
                writer.writeMessage(4, this.language_restriction, () => this.language_restriction.serialize(writer));
            if (this.audio_processing_type != RecognitionModelOptions.AudioProcessingType.AUDIO_PROCESSING_TYPE_UNSPECIFIED)
                writer.writeEnum(5, this.audio_processing_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionModelOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionModelOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.model = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.audio_format, () => message.audio_format = AudioFormatOptions.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.text_normalization, () => message.text_normalization = TextNormalizationOptions.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.language_restriction, () => message.language_restriction = LanguageRestrictionOptions.deserialize(reader));
                        break;
                    case 5:
                        message.audio_processing_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionModelOptions {
            return RecognitionModelOptions.deserialize(bytes);
        }
    }
    export namespace RecognitionModelOptions {
        export enum AudioProcessingType {
            AUDIO_PROCESSING_TYPE_UNSPECIFIED = 0,
            REAL_TIME = 1,
            FULL_DATA = 2
        }
    }
    export class SpeakerLabelingOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speaker_labeling?: SpeakerLabelingOptions.SpeakerLabeling;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speaker_labeling" in data && data.speaker_labeling != undefined) {
                    this.speaker_labeling = data.speaker_labeling;
                }
            }
        }
        get speaker_labeling() {
            return pb_1.Message.getFieldWithDefault(this, 1, SpeakerLabelingOptions.SpeakerLabeling.SPEAKER_LABELING_UNSPECIFIED) as SpeakerLabelingOptions.SpeakerLabeling;
        }
        set speaker_labeling(value: SpeakerLabelingOptions.SpeakerLabeling) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            speaker_labeling?: SpeakerLabelingOptions.SpeakerLabeling;
        }): SpeakerLabelingOptions {
            const message = new SpeakerLabelingOptions({});
            if (data.speaker_labeling != null) {
                message.speaker_labeling = data.speaker_labeling;
            }
            return message;
        }
        toObject() {
            const data: {
                speaker_labeling?: SpeakerLabelingOptions.SpeakerLabeling;
            } = {};
            if (this.speaker_labeling != null) {
                data.speaker_labeling = this.speaker_labeling;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speaker_labeling != SpeakerLabelingOptions.SpeakerLabeling.SPEAKER_LABELING_UNSPECIFIED)
                writer.writeEnum(1, this.speaker_labeling);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeakerLabelingOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpeakerLabelingOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speaker_labeling = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpeakerLabelingOptions {
            return SpeakerLabelingOptions.deserialize(bytes);
        }
    }
    export namespace SpeakerLabelingOptions {
        export enum SpeakerLabeling {
            SPEAKER_LABELING_UNSPECIFIED = 0,
            SPEAKER_LABELING_ENABLED = 1,
            SPEAKER_LABELING_DISABLED = 2
        }
    }
    export class StreamingOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            recognition_model?: RecognitionModelOptions;
            eou_classifier?: EouClassifierOptions;
            recognition_classifier?: RecognitionClassifierOptions;
            speech_analysis?: SpeechAnalysisOptions;
            speaker_labeling?: SpeakerLabelingOptions;
            summarization?: SummarizationOptions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("recognition_model" in data && data.recognition_model != undefined) {
                    this.recognition_model = data.recognition_model;
                }
                if ("eou_classifier" in data && data.eou_classifier != undefined) {
                    this.eou_classifier = data.eou_classifier;
                }
                if ("recognition_classifier" in data && data.recognition_classifier != undefined) {
                    this.recognition_classifier = data.recognition_classifier;
                }
                if ("speech_analysis" in data && data.speech_analysis != undefined) {
                    this.speech_analysis = data.speech_analysis;
                }
                if ("speaker_labeling" in data && data.speaker_labeling != undefined) {
                    this.speaker_labeling = data.speaker_labeling;
                }
                if ("summarization" in data && data.summarization != undefined) {
                    this.summarization = data.summarization;
                }
            }
        }
        get recognition_model() {
            return pb_1.Message.getWrapperField(this, RecognitionModelOptions, 1) as RecognitionModelOptions;
        }
        set recognition_model(value: RecognitionModelOptions) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_recognition_model() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get eou_classifier() {
            return pb_1.Message.getWrapperField(this, EouClassifierOptions, 2) as EouClassifierOptions;
        }
        set eou_classifier(value: EouClassifierOptions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_eou_classifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get recognition_classifier() {
            return pb_1.Message.getWrapperField(this, RecognitionClassifierOptions, 3) as RecognitionClassifierOptions;
        }
        set recognition_classifier(value: RecognitionClassifierOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_recognition_classifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get speech_analysis() {
            return pb_1.Message.getWrapperField(this, SpeechAnalysisOptions, 4) as SpeechAnalysisOptions;
        }
        set speech_analysis(value: SpeechAnalysisOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_speech_analysis() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get speaker_labeling() {
            return pb_1.Message.getWrapperField(this, SpeakerLabelingOptions, 5) as SpeakerLabelingOptions;
        }
        set speaker_labeling(value: SpeakerLabelingOptions) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_speaker_labeling() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get summarization() {
            return pb_1.Message.getWrapperField(this, SummarizationOptions, 6) as SummarizationOptions;
        }
        set summarization(value: SummarizationOptions) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_summarization() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            recognition_model?: ReturnType<typeof RecognitionModelOptions.prototype.toObject>;
            eou_classifier?: ReturnType<typeof EouClassifierOptions.prototype.toObject>;
            recognition_classifier?: ReturnType<typeof RecognitionClassifierOptions.prototype.toObject>;
            speech_analysis?: ReturnType<typeof SpeechAnalysisOptions.prototype.toObject>;
            speaker_labeling?: ReturnType<typeof SpeakerLabelingOptions.prototype.toObject>;
            summarization?: ReturnType<typeof SummarizationOptions.prototype.toObject>;
        }): StreamingOptions {
            const message = new StreamingOptions({});
            if (data.recognition_model != null) {
                message.recognition_model = RecognitionModelOptions.fromObject(data.recognition_model);
            }
            if (data.eou_classifier != null) {
                message.eou_classifier = EouClassifierOptions.fromObject(data.eou_classifier);
            }
            if (data.recognition_classifier != null) {
                message.recognition_classifier = RecognitionClassifierOptions.fromObject(data.recognition_classifier);
            }
            if (data.speech_analysis != null) {
                message.speech_analysis = SpeechAnalysisOptions.fromObject(data.speech_analysis);
            }
            if (data.speaker_labeling != null) {
                message.speaker_labeling = SpeakerLabelingOptions.fromObject(data.speaker_labeling);
            }
            if (data.summarization != null) {
                message.summarization = SummarizationOptions.fromObject(data.summarization);
            }
            return message;
        }
        toObject() {
            const data: {
                recognition_model?: ReturnType<typeof RecognitionModelOptions.prototype.toObject>;
                eou_classifier?: ReturnType<typeof EouClassifierOptions.prototype.toObject>;
                recognition_classifier?: ReturnType<typeof RecognitionClassifierOptions.prototype.toObject>;
                speech_analysis?: ReturnType<typeof SpeechAnalysisOptions.prototype.toObject>;
                speaker_labeling?: ReturnType<typeof SpeakerLabelingOptions.prototype.toObject>;
                summarization?: ReturnType<typeof SummarizationOptions.prototype.toObject>;
            } = {};
            if (this.recognition_model != null) {
                data.recognition_model = this.recognition_model.toObject();
            }
            if (this.eou_classifier != null) {
                data.eou_classifier = this.eou_classifier.toObject();
            }
            if (this.recognition_classifier != null) {
                data.recognition_classifier = this.recognition_classifier.toObject();
            }
            if (this.speech_analysis != null) {
                data.speech_analysis = this.speech_analysis.toObject();
            }
            if (this.speaker_labeling != null) {
                data.speaker_labeling = this.speaker_labeling.toObject();
            }
            if (this.summarization != null) {
                data.summarization = this.summarization.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_recognition_model)
                writer.writeMessage(1, this.recognition_model, () => this.recognition_model.serialize(writer));
            if (this.has_eou_classifier)
                writer.writeMessage(2, this.eou_classifier, () => this.eou_classifier.serialize(writer));
            if (this.has_recognition_classifier)
                writer.writeMessage(3, this.recognition_classifier, () => this.recognition_classifier.serialize(writer));
            if (this.has_speech_analysis)
                writer.writeMessage(4, this.speech_analysis, () => this.speech_analysis.serialize(writer));
            if (this.has_speaker_labeling)
                writer.writeMessage(5, this.speaker_labeling, () => this.speaker_labeling.serialize(writer));
            if (this.has_summarization)
                writer.writeMessage(6, this.summarization, () => this.summarization.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamingOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamingOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.recognition_model, () => message.recognition_model = RecognitionModelOptions.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.eou_classifier, () => message.eou_classifier = EouClassifierOptions.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.recognition_classifier, () => message.recognition_classifier = RecognitionClassifierOptions.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.speech_analysis, () => message.speech_analysis = SpeechAnalysisOptions.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.speaker_labeling, () => message.speaker_labeling = SpeakerLabelingOptions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.summarization, () => message.summarization = SummarizationOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamingOptions {
            return StreamingOptions.deserialize(bytes);
        }
    }
    export class AudioChunk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): AudioChunk {
            const message = new AudioChunk({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioChunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioChunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioChunk {
            return AudioChunk.deserialize(bytes);
        }
    }
    export class SilenceChunk extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            duration_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("duration_ms" in data && data.duration_ms != undefined) {
                    this.duration_ms = data.duration_ms;
                }
            }
        }
        get duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set duration_ms(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            duration_ms?: number;
        }): SilenceChunk {
            const message = new SilenceChunk({});
            if (data.duration_ms != null) {
                message.duration_ms = data.duration_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                duration_ms?: number;
            } = {};
            if (this.duration_ms != null) {
                data.duration_ms = this.duration_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.duration_ms != 0)
                writer.writeInt64(1, this.duration_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SilenceChunk {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SilenceChunk();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.duration_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SilenceChunk {
            return SilenceChunk.deserialize(bytes);
        }
    }
    export class Eou extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Eou {
            const message = new Eou({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Eou {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Eou();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Eou {
            return Eou.deserialize(bytes);
        }
    }
    export class StreamingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            session_options?: StreamingOptions;
            chunk?: never;
            silence_chunk?: never;
            eou?: never;
        } | {
            session_options?: never;
            chunk?: AudioChunk;
            silence_chunk?: never;
            eou?: never;
        } | {
            session_options?: never;
            chunk?: never;
            silence_chunk?: SilenceChunk;
            eou?: never;
        } | {
            session_options?: never;
            chunk?: never;
            silence_chunk?: never;
            eou?: Eou;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_options" in data && data.session_options != undefined) {
                    this.session_options = data.session_options;
                }
                if ("chunk" in data && data.chunk != undefined) {
                    this.chunk = data.chunk;
                }
                if ("silence_chunk" in data && data.silence_chunk != undefined) {
                    this.silence_chunk = data.silence_chunk;
                }
                if ("eou" in data && data.eou != undefined) {
                    this.eou = data.eou;
                }
            }
        }
        get session_options() {
            return pb_1.Message.getWrapperField(this, StreamingOptions, 1) as StreamingOptions;
        }
        set session_options(value: StreamingOptions) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_session_options() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get chunk() {
            return pb_1.Message.getWrapperField(this, AudioChunk, 2) as AudioChunk;
        }
        set chunk(value: AudioChunk) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_chunk() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get silence_chunk() {
            return pb_1.Message.getWrapperField(this, SilenceChunk, 3) as SilenceChunk;
        }
        set silence_chunk(value: SilenceChunk) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_silence_chunk() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get eou() {
            return pb_1.Message.getWrapperField(this, Eou, 4) as Eou;
        }
        set eou(value: Eou) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_eou() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get Event() {
            const cases: {
                [index: number]: "none" | "session_options" | "chunk" | "silence_chunk" | "eou";
            } = {
                0: "none",
                1: "session_options",
                2: "chunk",
                3: "silence_chunk",
                4: "eou"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            session_options?: ReturnType<typeof StreamingOptions.prototype.toObject>;
            chunk?: ReturnType<typeof AudioChunk.prototype.toObject>;
            silence_chunk?: ReturnType<typeof SilenceChunk.prototype.toObject>;
            eou?: ReturnType<typeof Eou.prototype.toObject>;
        }): StreamingRequest {
            const message = new StreamingRequest({});
            if (data.session_options != null) {
                message.session_options = StreamingOptions.fromObject(data.session_options);
            }
            if (data.chunk != null) {
                message.chunk = AudioChunk.fromObject(data.chunk);
            }
            if (data.silence_chunk != null) {
                message.silence_chunk = SilenceChunk.fromObject(data.silence_chunk);
            }
            if (data.eou != null) {
                message.eou = Eou.fromObject(data.eou);
            }
            return message;
        }
        toObject() {
            const data: {
                session_options?: ReturnType<typeof StreamingOptions.prototype.toObject>;
                chunk?: ReturnType<typeof AudioChunk.prototype.toObject>;
                silence_chunk?: ReturnType<typeof SilenceChunk.prototype.toObject>;
                eou?: ReturnType<typeof Eou.prototype.toObject>;
            } = {};
            if (this.session_options != null) {
                data.session_options = this.session_options.toObject();
            }
            if (this.chunk != null) {
                data.chunk = this.chunk.toObject();
            }
            if (this.silence_chunk != null) {
                data.silence_chunk = this.silence_chunk.toObject();
            }
            if (this.eou != null) {
                data.eou = this.eou.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session_options)
                writer.writeMessage(1, this.session_options, () => this.session_options.serialize(writer));
            if (this.has_chunk)
                writer.writeMessage(2, this.chunk, () => this.chunk.serialize(writer));
            if (this.has_silence_chunk)
                writer.writeMessage(3, this.silence_chunk, () => this.silence_chunk.serialize(writer));
            if (this.has_eou)
                writer.writeMessage(4, this.eou, () => this.eou.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session_options, () => message.session_options = StreamingOptions.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.chunk, () => message.chunk = AudioChunk.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.silence_chunk, () => message.silence_chunk = SilenceChunk.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.eou, () => message.eou = Eou.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamingRequest {
            return StreamingRequest.deserialize(bytes);
        }
    }
    export class RecognizeFileRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            recognition_model?: RecognitionModelOptions;
            recognition_classifier?: RecognitionClassifierOptions;
            speech_analysis?: SpeechAnalysisOptions;
            speaker_labeling?: SpeakerLabelingOptions;
            summarization?: SummarizationOptions;
        } & (({
            content?: Uint8Array;
            uri?: never;
        } | {
            content?: never;
            uri?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("recognition_model" in data && data.recognition_model != undefined) {
                    this.recognition_model = data.recognition_model;
                }
                if ("recognition_classifier" in data && data.recognition_classifier != undefined) {
                    this.recognition_classifier = data.recognition_classifier;
                }
                if ("speech_analysis" in data && data.speech_analysis != undefined) {
                    this.speech_analysis = data.speech_analysis;
                }
                if ("speaker_labeling" in data && data.speaker_labeling != undefined) {
                    this.speaker_labeling = data.speaker_labeling;
                }
                if ("summarization" in data && data.summarization != undefined) {
                    this.summarization = data.summarization;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_content() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_uri() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get recognition_model() {
            return pb_1.Message.getWrapperField(this, RecognitionModelOptions, 3) as RecognitionModelOptions;
        }
        set recognition_model(value: RecognitionModelOptions) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_recognition_model() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get recognition_classifier() {
            return pb_1.Message.getWrapperField(this, RecognitionClassifierOptions, 4) as RecognitionClassifierOptions;
        }
        set recognition_classifier(value: RecognitionClassifierOptions) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_recognition_classifier() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get speech_analysis() {
            return pb_1.Message.getWrapperField(this, SpeechAnalysisOptions, 5) as SpeechAnalysisOptions;
        }
        set speech_analysis(value: SpeechAnalysisOptions) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_speech_analysis() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get speaker_labeling() {
            return pb_1.Message.getWrapperField(this, SpeakerLabelingOptions, 6) as SpeakerLabelingOptions;
        }
        set speaker_labeling(value: SpeakerLabelingOptions) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_speaker_labeling() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get summarization() {
            return pb_1.Message.getWrapperField(this, SummarizationOptions, 7) as SummarizationOptions;
        }
        set summarization(value: SummarizationOptions) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_summarization() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get AudioSource() {
            const cases: {
                [index: number]: "none" | "content" | "uri";
            } = {
                0: "none",
                1: "content",
                2: "uri"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            content?: Uint8Array;
            uri?: string;
            recognition_model?: ReturnType<typeof RecognitionModelOptions.prototype.toObject>;
            recognition_classifier?: ReturnType<typeof RecognitionClassifierOptions.prototype.toObject>;
            speech_analysis?: ReturnType<typeof SpeechAnalysisOptions.prototype.toObject>;
            speaker_labeling?: ReturnType<typeof SpeakerLabelingOptions.prototype.toObject>;
            summarization?: ReturnType<typeof SummarizationOptions.prototype.toObject>;
        }): RecognizeFileRequest {
            const message = new RecognizeFileRequest({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.recognition_model != null) {
                message.recognition_model = RecognitionModelOptions.fromObject(data.recognition_model);
            }
            if (data.recognition_classifier != null) {
                message.recognition_classifier = RecognitionClassifierOptions.fromObject(data.recognition_classifier);
            }
            if (data.speech_analysis != null) {
                message.speech_analysis = SpeechAnalysisOptions.fromObject(data.speech_analysis);
            }
            if (data.speaker_labeling != null) {
                message.speaker_labeling = SpeakerLabelingOptions.fromObject(data.speaker_labeling);
            }
            if (data.summarization != null) {
                message.summarization = SummarizationOptions.fromObject(data.summarization);
            }
            return message;
        }
        toObject() {
            const data: {
                content?: Uint8Array;
                uri?: string;
                recognition_model?: ReturnType<typeof RecognitionModelOptions.prototype.toObject>;
                recognition_classifier?: ReturnType<typeof RecognitionClassifierOptions.prototype.toObject>;
                speech_analysis?: ReturnType<typeof SpeechAnalysisOptions.prototype.toObject>;
                speaker_labeling?: ReturnType<typeof SpeakerLabelingOptions.prototype.toObject>;
                summarization?: ReturnType<typeof SummarizationOptions.prototype.toObject>;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.recognition_model != null) {
                data.recognition_model = this.recognition_model.toObject();
            }
            if (this.recognition_classifier != null) {
                data.recognition_classifier = this.recognition_classifier.toObject();
            }
            if (this.speech_analysis != null) {
                data.speech_analysis = this.speech_analysis.toObject();
            }
            if (this.speaker_labeling != null) {
                data.speaker_labeling = this.speaker_labeling.toObject();
            }
            if (this.summarization != null) {
                data.summarization = this.summarization.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_content)
                writer.writeBytes(1, this.content);
            if (this.has_uri)
                writer.writeString(2, this.uri);
            if (this.has_recognition_model)
                writer.writeMessage(3, this.recognition_model, () => this.recognition_model.serialize(writer));
            if (this.has_recognition_classifier)
                writer.writeMessage(4, this.recognition_classifier, () => this.recognition_classifier.serialize(writer));
            if (this.has_speech_analysis)
                writer.writeMessage(5, this.speech_analysis, () => this.speech_analysis.serialize(writer));
            if (this.has_speaker_labeling)
                writer.writeMessage(6, this.speaker_labeling, () => this.speaker_labeling.serialize(writer));
            if (this.has_summarization)
                writer.writeMessage(7, this.summarization, () => this.summarization.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognizeFileRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognizeFileRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readBytes();
                        break;
                    case 2:
                        message.uri = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.recognition_model, () => message.recognition_model = RecognitionModelOptions.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.recognition_classifier, () => message.recognition_classifier = RecognitionClassifierOptions.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.speech_analysis, () => message.speech_analysis = SpeechAnalysisOptions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.speaker_labeling, () => message.speaker_labeling = SpeakerLabelingOptions.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.summarization, () => message.summarization = SummarizationOptions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognizeFileRequest {
            return RecognizeFileRequest.deserialize(bytes);
        }
    }
    export class Word extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("start_time_ms" in data && data.start_time_ms != undefined) {
                    this.start_time_ms = data.start_time_ms;
                }
                if ("end_time_ms" in data && data.end_time_ms != undefined) {
                    this.end_time_ms = data.end_time_ms;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
        }): Word {
            const message = new Word({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.start_time_ms != null) {
                message.start_time_ms = data.start_time_ms;
            }
            if (data.end_time_ms != null) {
                message.end_time_ms = data.end_time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                start_time_ms?: number;
                end_time_ms?: number;
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.start_time_ms != null) {
                data.start_time_ms = this.start_time_ms;
            }
            if (this.end_time_ms != null) {
                data.end_time_ms = this.end_time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (this.start_time_ms != 0)
                writer.writeInt64(2, this.start_time_ms);
            if (this.end_time_ms != 0)
                writer.writeInt64(3, this.end_time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Word {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Word();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 2:
                        message.start_time_ms = reader.readInt64();
                        break;
                    case 3:
                        message.end_time_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Word {
            return Word.deserialize(bytes);
        }
    }
    export class LanguageEstimation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            language_code?: string;
            probability?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("language_code" in data && data.language_code != undefined) {
                    this.language_code = data.language_code;
                }
                if ("probability" in data && data.probability != undefined) {
                    this.probability = data.probability;
                }
            }
        }
        get language_code() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set language_code(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get probability() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set probability(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            language_code?: string;
            probability?: number;
        }): LanguageEstimation {
            const message = new LanguageEstimation({});
            if (data.language_code != null) {
                message.language_code = data.language_code;
            }
            if (data.probability != null) {
                message.probability = data.probability;
            }
            return message;
        }
        toObject() {
            const data: {
                language_code?: string;
                probability?: number;
            } = {};
            if (this.language_code != null) {
                data.language_code = this.language_code;
            }
            if (this.probability != null) {
                data.probability = this.probability;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.language_code.length)
                writer.writeString(1, this.language_code);
            if (this.probability != 0)
                writer.writeDouble(2, this.probability);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LanguageEstimation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LanguageEstimation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.language_code = reader.readString();
                        break;
                    case 2:
                        message.probability = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LanguageEstimation {
            return LanguageEstimation.deserialize(bytes);
        }
    }
    export class Alternative extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            words?: Word[];
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
            confidence?: number;
            languages?: LanguageEstimation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("words" in data && data.words != undefined) {
                    this.words = data.words;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("start_time_ms" in data && data.start_time_ms != undefined) {
                    this.start_time_ms = data.start_time_ms;
                }
                if ("end_time_ms" in data && data.end_time_ms != undefined) {
                    this.end_time_ms = data.end_time_ms;
                }
                if ("confidence" in data && data.confidence != undefined) {
                    this.confidence = data.confidence;
                }
                if ("languages" in data && data.languages != undefined) {
                    this.languages = data.languages;
                }
            }
        }
        get words() {
            return pb_1.Message.getRepeatedWrapperField(this, Word, 1) as Word[];
        }
        set words(value: Word[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set start_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get end_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set end_time_ms(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get confidence() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set confidence(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get languages() {
            return pb_1.Message.getRepeatedWrapperField(this, LanguageEstimation, 6) as LanguageEstimation[];
        }
        set languages(value: LanguageEstimation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            words?: ReturnType<typeof Word.prototype.toObject>[];
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
            confidence?: number;
            languages?: ReturnType<typeof LanguageEstimation.prototype.toObject>[];
        }): Alternative {
            const message = new Alternative({});
            if (data.words != null) {
                message.words = data.words.map(item => Word.fromObject(item));
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.start_time_ms != null) {
                message.start_time_ms = data.start_time_ms;
            }
            if (data.end_time_ms != null) {
                message.end_time_ms = data.end_time_ms;
            }
            if (data.confidence != null) {
                message.confidence = data.confidence;
            }
            if (data.languages != null) {
                message.languages = data.languages.map(item => LanguageEstimation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                words?: ReturnType<typeof Word.prototype.toObject>[];
                text?: string;
                start_time_ms?: number;
                end_time_ms?: number;
                confidence?: number;
                languages?: ReturnType<typeof LanguageEstimation.prototype.toObject>[];
            } = {};
            if (this.words != null) {
                data.words = this.words.map((item: Word) => item.toObject());
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.start_time_ms != null) {
                data.start_time_ms = this.start_time_ms;
            }
            if (this.end_time_ms != null) {
                data.end_time_ms = this.end_time_ms;
            }
            if (this.confidence != null) {
                data.confidence = this.confidence;
            }
            if (this.languages != null) {
                data.languages = this.languages.map((item: LanguageEstimation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.words.length)
                writer.writeRepeatedMessage(1, this.words, (item: Word) => item.serialize(writer));
            if (this.text.length)
                writer.writeString(2, this.text);
            if (this.start_time_ms != 0)
                writer.writeInt64(3, this.start_time_ms);
            if (this.end_time_ms != 0)
                writer.writeInt64(4, this.end_time_ms);
            if (this.confidence != 0)
                writer.writeDouble(5, this.confidence);
            if (this.languages.length)
                writer.writeRepeatedMessage(6, this.languages, (item: LanguageEstimation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Alternative {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Alternative();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.words, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Word.deserialize(reader), Word));
                        break;
                    case 2:
                        message.text = reader.readString();
                        break;
                    case 3:
                        message.start_time_ms = reader.readInt64();
                        break;
                    case 4:
                        message.end_time_ms = reader.readInt64();
                        break;
                    case 5:
                        message.confidence = reader.readDouble();
                        break;
                    case 6:
                        reader.readMessage(message.languages, () => pb_1.Message.addToRepeatedWrapperField(message, 6, LanguageEstimation.deserialize(reader), LanguageEstimation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Alternative {
            return Alternative.deserialize(bytes);
        }
    }
    export class EouUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            time_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("time_ms" in data && data.time_ms != undefined) {
                    this.time_ms = data.time_ms;
                }
            }
        }
        get time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            time_ms?: number;
        }): EouUpdate {
            const message = new EouUpdate({});
            if (data.time_ms != null) {
                message.time_ms = data.time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                time_ms?: number;
            } = {};
            if (this.time_ms != null) {
                data.time_ms = this.time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.time_ms != 0)
                writer.writeInt64(2, this.time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EouUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EouUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.time_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EouUpdate {
            return EouUpdate.deserialize(bytes);
        }
    }
    export class AlternativeUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            alternatives?: Alternative[];
            /** @deprecated*/
            channel_tag?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("alternatives" in data && data.alternatives != undefined) {
                    this.alternatives = data.alternatives;
                }
                if ("channel_tag" in data && data.channel_tag != undefined) {
                    this.channel_tag = data.channel_tag;
                }
            }
        }
        get alternatives() {
            return pb_1.Message.getRepeatedWrapperField(this, Alternative, 1) as Alternative[];
        }
        set alternatives(value: Alternative[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        /** @deprecated*/
        get channel_tag() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        /** @deprecated*/
        set channel_tag(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            alternatives?: ReturnType<typeof Alternative.prototype.toObject>[];
            channel_tag?: string;
        }): AlternativeUpdate {
            const message = new AlternativeUpdate({});
            if (data.alternatives != null) {
                message.alternatives = data.alternatives.map(item => Alternative.fromObject(item));
            }
            if (data.channel_tag != null) {
                message.channel_tag = data.channel_tag;
            }
            return message;
        }
        toObject() {
            const data: {
                alternatives?: ReturnType<typeof Alternative.prototype.toObject>[];
                channel_tag?: string;
            } = {};
            if (this.alternatives != null) {
                data.alternatives = this.alternatives.map((item: Alternative) => item.toObject());
            }
            if (this.channel_tag != null) {
                data.channel_tag = this.channel_tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.alternatives.length)
                writer.writeRepeatedMessage(1, this.alternatives, (item: Alternative) => item.serialize(writer));
            if (this.channel_tag.length)
                writer.writeString(2, this.channel_tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlternativeUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlternativeUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.alternatives, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Alternative.deserialize(reader), Alternative));
                        break;
                    case 2:
                        message.channel_tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AlternativeUpdate {
            return AlternativeUpdate.deserialize(bytes);
        }
    }
    export class AudioCursors extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            received_data_ms?: number;
            reset_time_ms?: number;
            partial_time_ms?: number;
            final_time_ms?: number;
            final_index?: number;
            eou_time_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("received_data_ms" in data && data.received_data_ms != undefined) {
                    this.received_data_ms = data.received_data_ms;
                }
                if ("reset_time_ms" in data && data.reset_time_ms != undefined) {
                    this.reset_time_ms = data.reset_time_ms;
                }
                if ("partial_time_ms" in data && data.partial_time_ms != undefined) {
                    this.partial_time_ms = data.partial_time_ms;
                }
                if ("final_time_ms" in data && data.final_time_ms != undefined) {
                    this.final_time_ms = data.final_time_ms;
                }
                if ("final_index" in data && data.final_index != undefined) {
                    this.final_index = data.final_index;
                }
                if ("eou_time_ms" in data && data.eou_time_ms != undefined) {
                    this.eou_time_ms = data.eou_time_ms;
                }
            }
        }
        get received_data_ms() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set received_data_ms(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get reset_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set reset_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get partial_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set partial_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get final_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set final_time_ms(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get final_index() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set final_index(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get eou_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set eou_time_ms(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            received_data_ms?: number;
            reset_time_ms?: number;
            partial_time_ms?: number;
            final_time_ms?: number;
            final_index?: number;
            eou_time_ms?: number;
        }): AudioCursors {
            const message = new AudioCursors({});
            if (data.received_data_ms != null) {
                message.received_data_ms = data.received_data_ms;
            }
            if (data.reset_time_ms != null) {
                message.reset_time_ms = data.reset_time_ms;
            }
            if (data.partial_time_ms != null) {
                message.partial_time_ms = data.partial_time_ms;
            }
            if (data.final_time_ms != null) {
                message.final_time_ms = data.final_time_ms;
            }
            if (data.final_index != null) {
                message.final_index = data.final_index;
            }
            if (data.eou_time_ms != null) {
                message.eou_time_ms = data.eou_time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                received_data_ms?: number;
                reset_time_ms?: number;
                partial_time_ms?: number;
                final_time_ms?: number;
                final_index?: number;
                eou_time_ms?: number;
            } = {};
            if (this.received_data_ms != null) {
                data.received_data_ms = this.received_data_ms;
            }
            if (this.reset_time_ms != null) {
                data.reset_time_ms = this.reset_time_ms;
            }
            if (this.partial_time_ms != null) {
                data.partial_time_ms = this.partial_time_ms;
            }
            if (this.final_time_ms != null) {
                data.final_time_ms = this.final_time_ms;
            }
            if (this.final_index != null) {
                data.final_index = this.final_index;
            }
            if (this.eou_time_ms != null) {
                data.eou_time_ms = this.eou_time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.received_data_ms != 0)
                writer.writeInt64(1, this.received_data_ms);
            if (this.reset_time_ms != 0)
                writer.writeInt64(2, this.reset_time_ms);
            if (this.partial_time_ms != 0)
                writer.writeInt64(3, this.partial_time_ms);
            if (this.final_time_ms != 0)
                writer.writeInt64(4, this.final_time_ms);
            if (this.final_index != 0)
                writer.writeInt64(5, this.final_index);
            if (this.eou_time_ms != 0)
                writer.writeInt64(6, this.eou_time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioCursors {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioCursors();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.received_data_ms = reader.readInt64();
                        break;
                    case 2:
                        message.reset_time_ms = reader.readInt64();
                        break;
                    case 3:
                        message.partial_time_ms = reader.readInt64();
                        break;
                    case 4:
                        message.final_time_ms = reader.readInt64();
                        break;
                    case 5:
                        message.final_index = reader.readInt64();
                        break;
                    case 6:
                        message.eou_time_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioCursors {
            return AudioCursors.deserialize(bytes);
        }
    }
    export class FinalRefinement extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            final_index?: number;
        } & (({
            normalized_text?: AlternativeUpdate;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("final_index" in data && data.final_index != undefined) {
                    this.final_index = data.final_index;
                }
                if ("normalized_text" in data && data.normalized_text != undefined) {
                    this.normalized_text = data.normalized_text;
                }
            }
        }
        get final_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set final_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get normalized_text() {
            return pb_1.Message.getWrapperField(this, AlternativeUpdate, 2) as AlternativeUpdate;
        }
        set normalized_text(value: AlternativeUpdate) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_normalized_text() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "normalized_text";
            } = {
                0: "none",
                2: "normalized_text"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            final_index?: number;
            normalized_text?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
        }): FinalRefinement {
            const message = new FinalRefinement({});
            if (data.final_index != null) {
                message.final_index = data.final_index;
            }
            if (data.normalized_text != null) {
                message.normalized_text = AlternativeUpdate.fromObject(data.normalized_text);
            }
            return message;
        }
        toObject() {
            const data: {
                final_index?: number;
                normalized_text?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
            } = {};
            if (this.final_index != null) {
                data.final_index = this.final_index;
            }
            if (this.normalized_text != null) {
                data.normalized_text = this.normalized_text.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.final_index != 0)
                writer.writeInt64(1, this.final_index);
            if (this.has_normalized_text)
                writer.writeMessage(2, this.normalized_text, () => this.normalized_text.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalRefinement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalRefinement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.final_index = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.normalized_text, () => message.normalized_text = AlternativeUpdate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalRefinement {
            return FinalRefinement.deserialize(bytes);
        }
    }
    export class StatusCode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code_type?: CodeType;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code_type" in data && data.code_type != undefined) {
                    this.code_type = data.code_type;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get code_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, CodeType.CODE_TYPE_UNSPECIFIED) as CodeType;
        }
        set code_type(value: CodeType) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code_type?: CodeType;
            message?: string;
        }): StatusCode {
            const message = new StatusCode({});
            if (data.code_type != null) {
                message.code_type = data.code_type;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                code_type?: CodeType;
                message?: string;
            } = {};
            if (this.code_type != null) {
                data.code_type = this.code_type;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code_type != CodeType.CODE_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.code_type);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusCode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code_type = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StatusCode {
            return StatusCode.deserialize(bytes);
        }
    }
    export class SessionUuid extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uuid?: string;
            user_request_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("user_request_id" in data && data.user_request_id != undefined) {
                    this.user_request_id = data.user_request_id;
                }
            }
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_request_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            uuid?: string;
            user_request_id?: string;
        }): SessionUuid {
            const message = new SessionUuid({});
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.user_request_id != null) {
                message.user_request_id = data.user_request_id;
            }
            return message;
        }
        toObject() {
            const data: {
                uuid?: string;
                user_request_id?: string;
            } = {};
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.user_request_id != null) {
                data.user_request_id = this.user_request_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uuid.length)
                writer.writeString(1, this.uuid);
            if (this.user_request_id.length)
                writer.writeString(2, this.user_request_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SessionUuid {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SessionUuid();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uuid = reader.readString();
                        break;
                    case 2:
                        message.user_request_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SessionUuid {
            return SessionUuid.deserialize(bytes);
        }
    }
    export class PhraseHighlight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("start_time_ms" in data && data.start_time_ms != undefined) {
                    this.start_time_ms = data.start_time_ms;
                }
                if ("end_time_ms" in data && data.end_time_ms != undefined) {
                    this.end_time_ms = data.end_time_ms;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            text?: string;
            start_time_ms?: number;
            end_time_ms?: number;
        }): PhraseHighlight {
            const message = new PhraseHighlight({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.start_time_ms != null) {
                message.start_time_ms = data.start_time_ms;
            }
            if (data.end_time_ms != null) {
                message.end_time_ms = data.end_time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                start_time_ms?: number;
                end_time_ms?: number;
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.start_time_ms != null) {
                data.start_time_ms = this.start_time_ms;
            }
            if (this.end_time_ms != null) {
                data.end_time_ms = this.end_time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (this.start_time_ms != 0)
                writer.writeInt64(2, this.start_time_ms);
            if (this.end_time_ms != 0)
                writer.writeInt64(3, this.end_time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PhraseHighlight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PhraseHighlight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 2:
                        message.start_time_ms = reader.readInt64();
                        break;
                    case 3:
                        message.end_time_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PhraseHighlight {
            return PhraseHighlight.deserialize(bytes);
        }
    }
    export class RecognitionClassifierLabel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            label?: string;
            confidence?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("confidence" in data && data.confidence != undefined) {
                    this.confidence = data.confidence;
                }
            }
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get confidence() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set confidence(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            label?: string;
            confidence?: number;
        }): RecognitionClassifierLabel {
            const message = new RecognitionClassifierLabel({});
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.confidence != null) {
                message.confidence = data.confidence;
            }
            return message;
        }
        toObject() {
            const data: {
                label?: string;
                confidence?: number;
            } = {};
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.confidence != null) {
                data.confidence = this.confidence;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.label.length)
                writer.writeString(1, this.label);
            if (this.confidence != 0)
                writer.writeDouble(2, this.confidence);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionClassifierLabel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionClassifierLabel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.label = reader.readString();
                        break;
                    case 2:
                        message.confidence = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionClassifierLabel {
            return RecognitionClassifierLabel.deserialize(bytes);
        }
    }
    export class RecognitionClassifierResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classifier?: string;
            highlights?: PhraseHighlight[];
            labels?: RecognitionClassifierLabel[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classifier" in data && data.classifier != undefined) {
                    this.classifier = data.classifier;
                }
                if ("highlights" in data && data.highlights != undefined) {
                    this.highlights = data.highlights;
                }
                if ("labels" in data && data.labels != undefined) {
                    this.labels = data.labels;
                }
            }
        }
        get classifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set classifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get highlights() {
            return pb_1.Message.getRepeatedWrapperField(this, PhraseHighlight, 2) as PhraseHighlight[];
        }
        set highlights(value: PhraseHighlight[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get labels() {
            return pb_1.Message.getRepeatedWrapperField(this, RecognitionClassifierLabel, 3) as RecognitionClassifierLabel[];
        }
        set labels(value: RecognitionClassifierLabel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            classifier?: string;
            highlights?: ReturnType<typeof PhraseHighlight.prototype.toObject>[];
            labels?: ReturnType<typeof RecognitionClassifierLabel.prototype.toObject>[];
        }): RecognitionClassifierResult {
            const message = new RecognitionClassifierResult({});
            if (data.classifier != null) {
                message.classifier = data.classifier;
            }
            if (data.highlights != null) {
                message.highlights = data.highlights.map(item => PhraseHighlight.fromObject(item));
            }
            if (data.labels != null) {
                message.labels = data.labels.map(item => RecognitionClassifierLabel.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                classifier?: string;
                highlights?: ReturnType<typeof PhraseHighlight.prototype.toObject>[];
                labels?: ReturnType<typeof RecognitionClassifierLabel.prototype.toObject>[];
            } = {};
            if (this.classifier != null) {
                data.classifier = this.classifier;
            }
            if (this.highlights != null) {
                data.highlights = this.highlights.map((item: PhraseHighlight) => item.toObject());
            }
            if (this.labels != null) {
                data.labels = this.labels.map((item: RecognitionClassifierLabel) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classifier.length)
                writer.writeString(1, this.classifier);
            if (this.highlights.length)
                writer.writeRepeatedMessage(2, this.highlights, (item: PhraseHighlight) => item.serialize(writer));
            if (this.labels.length)
                writer.writeRepeatedMessage(3, this.labels, (item: RecognitionClassifierLabel) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionClassifierResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionClassifierResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.classifier = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.highlights, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PhraseHighlight.deserialize(reader), PhraseHighlight));
                        break;
                    case 3:
                        reader.readMessage(message.labels, () => pb_1.Message.addToRepeatedWrapperField(message, 3, RecognitionClassifierLabel.deserialize(reader), RecognitionClassifierLabel));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionClassifierResult {
            return RecognitionClassifierResult.deserialize(bytes);
        }
    }
    export class RecognitionClassifierUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            window_type?: RecognitionClassifierUpdate.WindowType;
            start_time_ms?: number;
            end_time_ms?: number;
            classifier_result?: RecognitionClassifierResult;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("window_type" in data && data.window_type != undefined) {
                    this.window_type = data.window_type;
                }
                if ("start_time_ms" in data && data.start_time_ms != undefined) {
                    this.start_time_ms = data.start_time_ms;
                }
                if ("end_time_ms" in data && data.end_time_ms != undefined) {
                    this.end_time_ms = data.end_time_ms;
                }
                if ("classifier_result" in data && data.classifier_result != undefined) {
                    this.classifier_result = data.classifier_result;
                }
            }
        }
        get window_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, RecognitionClassifierUpdate.WindowType.WINDOW_TYPE_UNSPECIFIED) as RecognitionClassifierUpdate.WindowType;
        }
        set window_type(value: RecognitionClassifierUpdate.WindowType) {
            pb_1.Message.setField(this, 1, value);
        }
        get start_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get end_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set end_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get classifier_result() {
            return pb_1.Message.getWrapperField(this, RecognitionClassifierResult, 4) as RecognitionClassifierResult;
        }
        set classifier_result(value: RecognitionClassifierResult) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_classifier_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            window_type?: RecognitionClassifierUpdate.WindowType;
            start_time_ms?: number;
            end_time_ms?: number;
            classifier_result?: ReturnType<typeof RecognitionClassifierResult.prototype.toObject>;
        }): RecognitionClassifierUpdate {
            const message = new RecognitionClassifierUpdate({});
            if (data.window_type != null) {
                message.window_type = data.window_type;
            }
            if (data.start_time_ms != null) {
                message.start_time_ms = data.start_time_ms;
            }
            if (data.end_time_ms != null) {
                message.end_time_ms = data.end_time_ms;
            }
            if (data.classifier_result != null) {
                message.classifier_result = RecognitionClassifierResult.fromObject(data.classifier_result);
            }
            return message;
        }
        toObject() {
            const data: {
                window_type?: RecognitionClassifierUpdate.WindowType;
                start_time_ms?: number;
                end_time_ms?: number;
                classifier_result?: ReturnType<typeof RecognitionClassifierResult.prototype.toObject>;
            } = {};
            if (this.window_type != null) {
                data.window_type = this.window_type;
            }
            if (this.start_time_ms != null) {
                data.start_time_ms = this.start_time_ms;
            }
            if (this.end_time_ms != null) {
                data.end_time_ms = this.end_time_ms;
            }
            if (this.classifier_result != null) {
                data.classifier_result = this.classifier_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.window_type != RecognitionClassifierUpdate.WindowType.WINDOW_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.window_type);
            if (this.start_time_ms != 0)
                writer.writeInt64(2, this.start_time_ms);
            if (this.end_time_ms != 0)
                writer.writeInt64(3, this.end_time_ms);
            if (this.has_classifier_result)
                writer.writeMessage(4, this.classifier_result, () => this.classifier_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecognitionClassifierUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecognitionClassifierUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.window_type = reader.readEnum();
                        break;
                    case 2:
                        message.start_time_ms = reader.readInt64();
                        break;
                    case 3:
                        message.end_time_ms = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.classifier_result, () => message.classifier_result = RecognitionClassifierResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecognitionClassifierUpdate {
            return RecognitionClassifierUpdate.deserialize(bytes);
        }
    }
    export namespace RecognitionClassifierUpdate {
        export enum WindowType {
            /** @deprecated*/
            WINDOW_TYPE_UNSPECIFIED = 0,
            LAST_UTTERANCE = 1,
            LAST_FINAL = 2,
            LAST_PARTIAL = 3
        }
    }
    export class DescriptiveStatistics extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            min?: number;
            max?: number;
            mean?: number;
            std?: number;
            quantiles?: DescriptiveStatistics.Quantile[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("min" in data && data.min != undefined) {
                    this.min = data.min;
                }
                if ("max" in data && data.max != undefined) {
                    this.max = data.max;
                }
                if ("mean" in data && data.mean != undefined) {
                    this.mean = data.mean;
                }
                if ("std" in data && data.std != undefined) {
                    this.std = data.std;
                }
                if ("quantiles" in data && data.quantiles != undefined) {
                    this.quantiles = data.quantiles;
                }
            }
        }
        get min() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set min(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get max() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get mean() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set mean(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get std() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set std(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get quantiles() {
            return pb_1.Message.getRepeatedWrapperField(this, DescriptiveStatistics.Quantile, 5) as DescriptiveStatistics.Quantile[];
        }
        set quantiles(value: DescriptiveStatistics.Quantile[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            min?: number;
            max?: number;
            mean?: number;
            std?: number;
            quantiles?: ReturnType<typeof DescriptiveStatistics.Quantile.prototype.toObject>[];
        }): DescriptiveStatistics {
            const message = new DescriptiveStatistics({});
            if (data.min != null) {
                message.min = data.min;
            }
            if (data.max != null) {
                message.max = data.max;
            }
            if (data.mean != null) {
                message.mean = data.mean;
            }
            if (data.std != null) {
                message.std = data.std;
            }
            if (data.quantiles != null) {
                message.quantiles = data.quantiles.map(item => DescriptiveStatistics.Quantile.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                min?: number;
                max?: number;
                mean?: number;
                std?: number;
                quantiles?: ReturnType<typeof DescriptiveStatistics.Quantile.prototype.toObject>[];
            } = {};
            if (this.min != null) {
                data.min = this.min;
            }
            if (this.max != null) {
                data.max = this.max;
            }
            if (this.mean != null) {
                data.mean = this.mean;
            }
            if (this.std != null) {
                data.std = this.std;
            }
            if (this.quantiles != null) {
                data.quantiles = this.quantiles.map((item: DescriptiveStatistics.Quantile) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.min != 0)
                writer.writeDouble(1, this.min);
            if (this.max != 0)
                writer.writeDouble(2, this.max);
            if (this.mean != 0)
                writer.writeDouble(3, this.mean);
            if (this.std != 0)
                writer.writeDouble(4, this.std);
            if (this.quantiles.length)
                writer.writeRepeatedMessage(5, this.quantiles, (item: DescriptiveStatistics.Quantile) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DescriptiveStatistics {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DescriptiveStatistics();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.min = reader.readDouble();
                        break;
                    case 2:
                        message.max = reader.readDouble();
                        break;
                    case 3:
                        message.mean = reader.readDouble();
                        break;
                    case 4:
                        message.std = reader.readDouble();
                        break;
                    case 5:
                        reader.readMessage(message.quantiles, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DescriptiveStatistics.Quantile.deserialize(reader), DescriptiveStatistics.Quantile));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DescriptiveStatistics {
            return DescriptiveStatistics.deserialize(bytes);
        }
    }
    export namespace DescriptiveStatistics {
        export class Quantile extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                level?: number;
                value?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set level(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set value(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                level?: number;
                value?: number;
            }): Quantile {
                const message = new Quantile({});
                if (data.level != null) {
                    message.level = data.level;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                return message;
            }
            toObject() {
                const data: {
                    level?: number;
                    value?: number;
                } = {};
                if (this.level != null) {
                    data.level = this.level;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.level != 0)
                    writer.writeDouble(1, this.level);
                if (this.value != 0)
                    writer.writeDouble(2, this.value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quantile {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quantile();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.level = reader.readDouble();
                            break;
                        case 2:
                            message.value = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Quantile {
                return Quantile.deserialize(bytes);
            }
        }
    }
    export class AudioSegmentBoundaries extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_time_ms?: number;
            end_time_ms?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_time_ms" in data && data.start_time_ms != undefined) {
                    this.start_time_ms = data.start_time_ms;
                }
                if ("end_time_ms" in data && data.end_time_ms != undefined) {
                    this.end_time_ms = data.end_time_ms;
                }
            }
        }
        get start_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_time_ms(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_time_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start_time_ms?: number;
            end_time_ms?: number;
        }): AudioSegmentBoundaries {
            const message = new AudioSegmentBoundaries({});
            if (data.start_time_ms != null) {
                message.start_time_ms = data.start_time_ms;
            }
            if (data.end_time_ms != null) {
                message.end_time_ms = data.end_time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                start_time_ms?: number;
                end_time_ms?: number;
            } = {};
            if (this.start_time_ms != null) {
                data.start_time_ms = this.start_time_ms;
            }
            if (this.end_time_ms != null) {
                data.end_time_ms = this.end_time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_time_ms != 0)
                writer.writeInt64(1, this.start_time_ms);
            if (this.end_time_ms != 0)
                writer.writeInt64(2, this.end_time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioSegmentBoundaries {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioSegmentBoundaries();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_time_ms = reader.readInt64();
                        break;
                    case 2:
                        message.end_time_ms = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AudioSegmentBoundaries {
            return AudioSegmentBoundaries.deserialize(bytes);
        }
    }
    export class SpeakerAnalysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speaker_tag?: string;
            window_type?: SpeakerAnalysis.WindowType;
            speech_boundaries?: AudioSegmentBoundaries;
            total_speech_ms?: number;
            speech_ratio?: number;
            total_silence_ms?: number;
            silence_ratio?: number;
            words_count?: number;
            letters_count?: number;
            words_per_second?: DescriptiveStatistics;
            letters_per_second?: DescriptiveStatistics;
            words_per_utterance?: DescriptiveStatistics;
            letters_per_utterance?: DescriptiveStatistics;
            utterance_count?: number;
            utterance_duration_estimation?: DescriptiveStatistics;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speaker_tag" in data && data.speaker_tag != undefined) {
                    this.speaker_tag = data.speaker_tag;
                }
                if ("window_type" in data && data.window_type != undefined) {
                    this.window_type = data.window_type;
                }
                if ("speech_boundaries" in data && data.speech_boundaries != undefined) {
                    this.speech_boundaries = data.speech_boundaries;
                }
                if ("total_speech_ms" in data && data.total_speech_ms != undefined) {
                    this.total_speech_ms = data.total_speech_ms;
                }
                if ("speech_ratio" in data && data.speech_ratio != undefined) {
                    this.speech_ratio = data.speech_ratio;
                }
                if ("total_silence_ms" in data && data.total_silence_ms != undefined) {
                    this.total_silence_ms = data.total_silence_ms;
                }
                if ("silence_ratio" in data && data.silence_ratio != undefined) {
                    this.silence_ratio = data.silence_ratio;
                }
                if ("words_count" in data && data.words_count != undefined) {
                    this.words_count = data.words_count;
                }
                if ("letters_count" in data && data.letters_count != undefined) {
                    this.letters_count = data.letters_count;
                }
                if ("words_per_second" in data && data.words_per_second != undefined) {
                    this.words_per_second = data.words_per_second;
                }
                if ("letters_per_second" in data && data.letters_per_second != undefined) {
                    this.letters_per_second = data.letters_per_second;
                }
                if ("words_per_utterance" in data && data.words_per_utterance != undefined) {
                    this.words_per_utterance = data.words_per_utterance;
                }
                if ("letters_per_utterance" in data && data.letters_per_utterance != undefined) {
                    this.letters_per_utterance = data.letters_per_utterance;
                }
                if ("utterance_count" in data && data.utterance_count != undefined) {
                    this.utterance_count = data.utterance_count;
                }
                if ("utterance_duration_estimation" in data && data.utterance_duration_estimation != undefined) {
                    this.utterance_duration_estimation = data.utterance_duration_estimation;
                }
            }
        }
        get speaker_tag() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set speaker_tag(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get window_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, SpeakerAnalysis.WindowType.WINDOW_TYPE_UNSPECIFIED) as SpeakerAnalysis.WindowType;
        }
        set window_type(value: SpeakerAnalysis.WindowType) {
            pb_1.Message.setField(this, 2, value);
        }
        get speech_boundaries() {
            return pb_1.Message.getWrapperField(this, AudioSegmentBoundaries, 3) as AudioSegmentBoundaries;
        }
        set speech_boundaries(value: AudioSegmentBoundaries) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_speech_boundaries() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get total_speech_ms() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set total_speech_ms(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get speech_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set speech_ratio(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get total_silence_ms() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set total_silence_ms(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get silence_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set silence_ratio(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get words_count() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set words_count(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get letters_count() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set letters_count(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get words_per_second() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 10) as DescriptiveStatistics;
        }
        set words_per_second(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_words_per_second() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get letters_per_second() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 11) as DescriptiveStatistics;
        }
        set letters_per_second(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get has_letters_per_second() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get words_per_utterance() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 12) as DescriptiveStatistics;
        }
        set words_per_utterance(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_words_per_utterance() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get letters_per_utterance() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 13) as DescriptiveStatistics;
        }
        set letters_per_utterance(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_letters_per_utterance() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get utterance_count() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set utterance_count(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get utterance_duration_estimation() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 15) as DescriptiveStatistics;
        }
        set utterance_duration_estimation(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_utterance_duration_estimation() {
            return pb_1.Message.getField(this, 15) != null;
        }
        static fromObject(data: {
            speaker_tag?: string;
            window_type?: SpeakerAnalysis.WindowType;
            speech_boundaries?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>;
            total_speech_ms?: number;
            speech_ratio?: number;
            total_silence_ms?: number;
            silence_ratio?: number;
            words_count?: number;
            letters_count?: number;
            words_per_second?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            letters_per_second?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            words_per_utterance?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            letters_per_utterance?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            utterance_count?: number;
            utterance_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
        }): SpeakerAnalysis {
            const message = new SpeakerAnalysis({});
            if (data.speaker_tag != null) {
                message.speaker_tag = data.speaker_tag;
            }
            if (data.window_type != null) {
                message.window_type = data.window_type;
            }
            if (data.speech_boundaries != null) {
                message.speech_boundaries = AudioSegmentBoundaries.fromObject(data.speech_boundaries);
            }
            if (data.total_speech_ms != null) {
                message.total_speech_ms = data.total_speech_ms;
            }
            if (data.speech_ratio != null) {
                message.speech_ratio = data.speech_ratio;
            }
            if (data.total_silence_ms != null) {
                message.total_silence_ms = data.total_silence_ms;
            }
            if (data.silence_ratio != null) {
                message.silence_ratio = data.silence_ratio;
            }
            if (data.words_count != null) {
                message.words_count = data.words_count;
            }
            if (data.letters_count != null) {
                message.letters_count = data.letters_count;
            }
            if (data.words_per_second != null) {
                message.words_per_second = DescriptiveStatistics.fromObject(data.words_per_second);
            }
            if (data.letters_per_second != null) {
                message.letters_per_second = DescriptiveStatistics.fromObject(data.letters_per_second);
            }
            if (data.words_per_utterance != null) {
                message.words_per_utterance = DescriptiveStatistics.fromObject(data.words_per_utterance);
            }
            if (data.letters_per_utterance != null) {
                message.letters_per_utterance = DescriptiveStatistics.fromObject(data.letters_per_utterance);
            }
            if (data.utterance_count != null) {
                message.utterance_count = data.utterance_count;
            }
            if (data.utterance_duration_estimation != null) {
                message.utterance_duration_estimation = DescriptiveStatistics.fromObject(data.utterance_duration_estimation);
            }
            return message;
        }
        toObject() {
            const data: {
                speaker_tag?: string;
                window_type?: SpeakerAnalysis.WindowType;
                speech_boundaries?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>;
                total_speech_ms?: number;
                speech_ratio?: number;
                total_silence_ms?: number;
                silence_ratio?: number;
                words_count?: number;
                letters_count?: number;
                words_per_second?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                letters_per_second?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                words_per_utterance?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                letters_per_utterance?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                utterance_count?: number;
                utterance_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            } = {};
            if (this.speaker_tag != null) {
                data.speaker_tag = this.speaker_tag;
            }
            if (this.window_type != null) {
                data.window_type = this.window_type;
            }
            if (this.speech_boundaries != null) {
                data.speech_boundaries = this.speech_boundaries.toObject();
            }
            if (this.total_speech_ms != null) {
                data.total_speech_ms = this.total_speech_ms;
            }
            if (this.speech_ratio != null) {
                data.speech_ratio = this.speech_ratio;
            }
            if (this.total_silence_ms != null) {
                data.total_silence_ms = this.total_silence_ms;
            }
            if (this.silence_ratio != null) {
                data.silence_ratio = this.silence_ratio;
            }
            if (this.words_count != null) {
                data.words_count = this.words_count;
            }
            if (this.letters_count != null) {
                data.letters_count = this.letters_count;
            }
            if (this.words_per_second != null) {
                data.words_per_second = this.words_per_second.toObject();
            }
            if (this.letters_per_second != null) {
                data.letters_per_second = this.letters_per_second.toObject();
            }
            if (this.words_per_utterance != null) {
                data.words_per_utterance = this.words_per_utterance.toObject();
            }
            if (this.letters_per_utterance != null) {
                data.letters_per_utterance = this.letters_per_utterance.toObject();
            }
            if (this.utterance_count != null) {
                data.utterance_count = this.utterance_count;
            }
            if (this.utterance_duration_estimation != null) {
                data.utterance_duration_estimation = this.utterance_duration_estimation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speaker_tag.length)
                writer.writeString(1, this.speaker_tag);
            if (this.window_type != SpeakerAnalysis.WindowType.WINDOW_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.window_type);
            if (this.has_speech_boundaries)
                writer.writeMessage(3, this.speech_boundaries, () => this.speech_boundaries.serialize(writer));
            if (this.total_speech_ms != 0)
                writer.writeInt64(4, this.total_speech_ms);
            if (this.speech_ratio != 0)
                writer.writeDouble(5, this.speech_ratio);
            if (this.total_silence_ms != 0)
                writer.writeInt64(6, this.total_silence_ms);
            if (this.silence_ratio != 0)
                writer.writeDouble(7, this.silence_ratio);
            if (this.words_count != 0)
                writer.writeInt64(8, this.words_count);
            if (this.letters_count != 0)
                writer.writeInt64(9, this.letters_count);
            if (this.has_words_per_second)
                writer.writeMessage(10, this.words_per_second, () => this.words_per_second.serialize(writer));
            if (this.has_letters_per_second)
                writer.writeMessage(11, this.letters_per_second, () => this.letters_per_second.serialize(writer));
            if (this.has_words_per_utterance)
                writer.writeMessage(12, this.words_per_utterance, () => this.words_per_utterance.serialize(writer));
            if (this.has_letters_per_utterance)
                writer.writeMessage(13, this.letters_per_utterance, () => this.letters_per_utterance.serialize(writer));
            if (this.utterance_count != 0)
                writer.writeInt64(14, this.utterance_count);
            if (this.has_utterance_duration_estimation)
                writer.writeMessage(15, this.utterance_duration_estimation, () => this.utterance_duration_estimation.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpeakerAnalysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpeakerAnalysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speaker_tag = reader.readString();
                        break;
                    case 2:
                        message.window_type = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.speech_boundaries, () => message.speech_boundaries = AudioSegmentBoundaries.deserialize(reader));
                        break;
                    case 4:
                        message.total_speech_ms = reader.readInt64();
                        break;
                    case 5:
                        message.speech_ratio = reader.readDouble();
                        break;
                    case 6:
                        message.total_silence_ms = reader.readInt64();
                        break;
                    case 7:
                        message.silence_ratio = reader.readDouble();
                        break;
                    case 8:
                        message.words_count = reader.readInt64();
                        break;
                    case 9:
                        message.letters_count = reader.readInt64();
                        break;
                    case 10:
                        reader.readMessage(message.words_per_second, () => message.words_per_second = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.letters_per_second, () => message.letters_per_second = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.words_per_utterance, () => message.words_per_utterance = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.letters_per_utterance, () => message.letters_per_utterance = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 14:
                        message.utterance_count = reader.readInt64();
                        break;
                    case 15:
                        reader.readMessage(message.utterance_duration_estimation, () => message.utterance_duration_estimation = DescriptiveStatistics.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SpeakerAnalysis {
            return SpeakerAnalysis.deserialize(bytes);
        }
    }
    export namespace SpeakerAnalysis {
        export enum WindowType {
            /** @deprecated*/
            WINDOW_TYPE_UNSPECIFIED = 0,
            TOTAL = 1,
            LAST_UTTERANCE = 2
        }
    }
    export class ConversationAnalysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            conversation_boundaries?: AudioSegmentBoundaries;
            total_simultaneous_silence_duration_ms?: number;
            total_simultaneous_silence_ratio?: number;
            simultaneous_silence_duration_estimation?: DescriptiveStatistics;
            total_simultaneous_speech_duration_ms?: number;
            total_simultaneous_speech_ratio?: number;
            simultaneous_speech_duration_estimation?: DescriptiveStatistics;
            speaker_interrupts?: ConversationAnalysis.InterruptsEvaluation[];
            total_speech_duration_ms?: number;
            total_speech_ratio?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("conversation_boundaries" in data && data.conversation_boundaries != undefined) {
                    this.conversation_boundaries = data.conversation_boundaries;
                }
                if ("total_simultaneous_silence_duration_ms" in data && data.total_simultaneous_silence_duration_ms != undefined) {
                    this.total_simultaneous_silence_duration_ms = data.total_simultaneous_silence_duration_ms;
                }
                if ("total_simultaneous_silence_ratio" in data && data.total_simultaneous_silence_ratio != undefined) {
                    this.total_simultaneous_silence_ratio = data.total_simultaneous_silence_ratio;
                }
                if ("simultaneous_silence_duration_estimation" in data && data.simultaneous_silence_duration_estimation != undefined) {
                    this.simultaneous_silence_duration_estimation = data.simultaneous_silence_duration_estimation;
                }
                if ("total_simultaneous_speech_duration_ms" in data && data.total_simultaneous_speech_duration_ms != undefined) {
                    this.total_simultaneous_speech_duration_ms = data.total_simultaneous_speech_duration_ms;
                }
                if ("total_simultaneous_speech_ratio" in data && data.total_simultaneous_speech_ratio != undefined) {
                    this.total_simultaneous_speech_ratio = data.total_simultaneous_speech_ratio;
                }
                if ("simultaneous_speech_duration_estimation" in data && data.simultaneous_speech_duration_estimation != undefined) {
                    this.simultaneous_speech_duration_estimation = data.simultaneous_speech_duration_estimation;
                }
                if ("speaker_interrupts" in data && data.speaker_interrupts != undefined) {
                    this.speaker_interrupts = data.speaker_interrupts;
                }
                if ("total_speech_duration_ms" in data && data.total_speech_duration_ms != undefined) {
                    this.total_speech_duration_ms = data.total_speech_duration_ms;
                }
                if ("total_speech_ratio" in data && data.total_speech_ratio != undefined) {
                    this.total_speech_ratio = data.total_speech_ratio;
                }
            }
        }
        get conversation_boundaries() {
            return pb_1.Message.getWrapperField(this, AudioSegmentBoundaries, 1) as AudioSegmentBoundaries;
        }
        set conversation_boundaries(value: AudioSegmentBoundaries) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_conversation_boundaries() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total_simultaneous_silence_duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_simultaneous_silence_duration_ms(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_simultaneous_silence_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_simultaneous_silence_ratio(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get simultaneous_silence_duration_estimation() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 4) as DescriptiveStatistics;
        }
        set simultaneous_silence_duration_estimation(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_simultaneous_silence_duration_estimation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get total_simultaneous_speech_duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_simultaneous_speech_duration_ms(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get total_simultaneous_speech_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set total_simultaneous_speech_ratio(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get simultaneous_speech_duration_estimation() {
            return pb_1.Message.getWrapperField(this, DescriptiveStatistics, 7) as DescriptiveStatistics;
        }
        set simultaneous_speech_duration_estimation(value: DescriptiveStatistics) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_simultaneous_speech_duration_estimation() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get speaker_interrupts() {
            return pb_1.Message.getRepeatedWrapperField(this, ConversationAnalysis.InterruptsEvaluation, 8) as ConversationAnalysis.InterruptsEvaluation[];
        }
        set speaker_interrupts(value: ConversationAnalysis.InterruptsEvaluation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get total_speech_duration_ms() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set total_speech_duration_ms(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get total_speech_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set total_speech_ratio(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            conversation_boundaries?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>;
            total_simultaneous_silence_duration_ms?: number;
            total_simultaneous_silence_ratio?: number;
            simultaneous_silence_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            total_simultaneous_speech_duration_ms?: number;
            total_simultaneous_speech_ratio?: number;
            simultaneous_speech_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
            speaker_interrupts?: ReturnType<typeof ConversationAnalysis.InterruptsEvaluation.prototype.toObject>[];
            total_speech_duration_ms?: number;
            total_speech_ratio?: number;
        }): ConversationAnalysis {
            const message = new ConversationAnalysis({});
            if (data.conversation_boundaries != null) {
                message.conversation_boundaries = AudioSegmentBoundaries.fromObject(data.conversation_boundaries);
            }
            if (data.total_simultaneous_silence_duration_ms != null) {
                message.total_simultaneous_silence_duration_ms = data.total_simultaneous_silence_duration_ms;
            }
            if (data.total_simultaneous_silence_ratio != null) {
                message.total_simultaneous_silence_ratio = data.total_simultaneous_silence_ratio;
            }
            if (data.simultaneous_silence_duration_estimation != null) {
                message.simultaneous_silence_duration_estimation = DescriptiveStatistics.fromObject(data.simultaneous_silence_duration_estimation);
            }
            if (data.total_simultaneous_speech_duration_ms != null) {
                message.total_simultaneous_speech_duration_ms = data.total_simultaneous_speech_duration_ms;
            }
            if (data.total_simultaneous_speech_ratio != null) {
                message.total_simultaneous_speech_ratio = data.total_simultaneous_speech_ratio;
            }
            if (data.simultaneous_speech_duration_estimation != null) {
                message.simultaneous_speech_duration_estimation = DescriptiveStatistics.fromObject(data.simultaneous_speech_duration_estimation);
            }
            if (data.speaker_interrupts != null) {
                message.speaker_interrupts = data.speaker_interrupts.map(item => ConversationAnalysis.InterruptsEvaluation.fromObject(item));
            }
            if (data.total_speech_duration_ms != null) {
                message.total_speech_duration_ms = data.total_speech_duration_ms;
            }
            if (data.total_speech_ratio != null) {
                message.total_speech_ratio = data.total_speech_ratio;
            }
            return message;
        }
        toObject() {
            const data: {
                conversation_boundaries?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>;
                total_simultaneous_silence_duration_ms?: number;
                total_simultaneous_silence_ratio?: number;
                simultaneous_silence_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                total_simultaneous_speech_duration_ms?: number;
                total_simultaneous_speech_ratio?: number;
                simultaneous_speech_duration_estimation?: ReturnType<typeof DescriptiveStatistics.prototype.toObject>;
                speaker_interrupts?: ReturnType<typeof ConversationAnalysis.InterruptsEvaluation.prototype.toObject>[];
                total_speech_duration_ms?: number;
                total_speech_ratio?: number;
            } = {};
            if (this.conversation_boundaries != null) {
                data.conversation_boundaries = this.conversation_boundaries.toObject();
            }
            if (this.total_simultaneous_silence_duration_ms != null) {
                data.total_simultaneous_silence_duration_ms = this.total_simultaneous_silence_duration_ms;
            }
            if (this.total_simultaneous_silence_ratio != null) {
                data.total_simultaneous_silence_ratio = this.total_simultaneous_silence_ratio;
            }
            if (this.simultaneous_silence_duration_estimation != null) {
                data.simultaneous_silence_duration_estimation = this.simultaneous_silence_duration_estimation.toObject();
            }
            if (this.total_simultaneous_speech_duration_ms != null) {
                data.total_simultaneous_speech_duration_ms = this.total_simultaneous_speech_duration_ms;
            }
            if (this.total_simultaneous_speech_ratio != null) {
                data.total_simultaneous_speech_ratio = this.total_simultaneous_speech_ratio;
            }
            if (this.simultaneous_speech_duration_estimation != null) {
                data.simultaneous_speech_duration_estimation = this.simultaneous_speech_duration_estimation.toObject();
            }
            if (this.speaker_interrupts != null) {
                data.speaker_interrupts = this.speaker_interrupts.map((item: ConversationAnalysis.InterruptsEvaluation) => item.toObject());
            }
            if (this.total_speech_duration_ms != null) {
                data.total_speech_duration_ms = this.total_speech_duration_ms;
            }
            if (this.total_speech_ratio != null) {
                data.total_speech_ratio = this.total_speech_ratio;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_conversation_boundaries)
                writer.writeMessage(1, this.conversation_boundaries, () => this.conversation_boundaries.serialize(writer));
            if (this.total_simultaneous_silence_duration_ms != 0)
                writer.writeInt64(2, this.total_simultaneous_silence_duration_ms);
            if (this.total_simultaneous_silence_ratio != 0)
                writer.writeDouble(3, this.total_simultaneous_silence_ratio);
            if (this.has_simultaneous_silence_duration_estimation)
                writer.writeMessage(4, this.simultaneous_silence_duration_estimation, () => this.simultaneous_silence_duration_estimation.serialize(writer));
            if (this.total_simultaneous_speech_duration_ms != 0)
                writer.writeInt64(5, this.total_simultaneous_speech_duration_ms);
            if (this.total_simultaneous_speech_ratio != 0)
                writer.writeDouble(6, this.total_simultaneous_speech_ratio);
            if (this.has_simultaneous_speech_duration_estimation)
                writer.writeMessage(7, this.simultaneous_speech_duration_estimation, () => this.simultaneous_speech_duration_estimation.serialize(writer));
            if (this.speaker_interrupts.length)
                writer.writeRepeatedMessage(8, this.speaker_interrupts, (item: ConversationAnalysis.InterruptsEvaluation) => item.serialize(writer));
            if (this.total_speech_duration_ms != 0)
                writer.writeInt64(9, this.total_speech_duration_ms);
            if (this.total_speech_ratio != 0)
                writer.writeDouble(10, this.total_speech_ratio);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConversationAnalysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConversationAnalysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.conversation_boundaries, () => message.conversation_boundaries = AudioSegmentBoundaries.deserialize(reader));
                        break;
                    case 2:
                        message.total_simultaneous_silence_duration_ms = reader.readInt64();
                        break;
                    case 3:
                        message.total_simultaneous_silence_ratio = reader.readDouble();
                        break;
                    case 4:
                        reader.readMessage(message.simultaneous_silence_duration_estimation, () => message.simultaneous_silence_duration_estimation = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 5:
                        message.total_simultaneous_speech_duration_ms = reader.readInt64();
                        break;
                    case 6:
                        message.total_simultaneous_speech_ratio = reader.readDouble();
                        break;
                    case 7:
                        reader.readMessage(message.simultaneous_speech_duration_estimation, () => message.simultaneous_speech_duration_estimation = DescriptiveStatistics.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.speaker_interrupts, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ConversationAnalysis.InterruptsEvaluation.deserialize(reader), ConversationAnalysis.InterruptsEvaluation));
                        break;
                    case 9:
                        message.total_speech_duration_ms = reader.readInt64();
                        break;
                    case 10:
                        message.total_speech_ratio = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConversationAnalysis {
            return ConversationAnalysis.deserialize(bytes);
        }
    }
    export namespace ConversationAnalysis {
        export class InterruptsEvaluation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                speaker_tag?: string;
                interrupts_count?: number;
                interrupts_duration_ms?: number;
                interrupts?: AudioSegmentBoundaries[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("speaker_tag" in data && data.speaker_tag != undefined) {
                        this.speaker_tag = data.speaker_tag;
                    }
                    if ("interrupts_count" in data && data.interrupts_count != undefined) {
                        this.interrupts_count = data.interrupts_count;
                    }
                    if ("interrupts_duration_ms" in data && data.interrupts_duration_ms != undefined) {
                        this.interrupts_duration_ms = data.interrupts_duration_ms;
                    }
                    if ("interrupts" in data && data.interrupts != undefined) {
                        this.interrupts = data.interrupts;
                    }
                }
            }
            get speaker_tag() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set speaker_tag(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get interrupts_count() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set interrupts_count(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get interrupts_duration_ms() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set interrupts_duration_ms(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get interrupts() {
                return pb_1.Message.getRepeatedWrapperField(this, AudioSegmentBoundaries, 4) as AudioSegmentBoundaries[];
            }
            set interrupts(value: AudioSegmentBoundaries[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data: {
                speaker_tag?: string;
                interrupts_count?: number;
                interrupts_duration_ms?: number;
                interrupts?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>[];
            }): InterruptsEvaluation {
                const message = new InterruptsEvaluation({});
                if (data.speaker_tag != null) {
                    message.speaker_tag = data.speaker_tag;
                }
                if (data.interrupts_count != null) {
                    message.interrupts_count = data.interrupts_count;
                }
                if (data.interrupts_duration_ms != null) {
                    message.interrupts_duration_ms = data.interrupts_duration_ms;
                }
                if (data.interrupts != null) {
                    message.interrupts = data.interrupts.map(item => AudioSegmentBoundaries.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    speaker_tag?: string;
                    interrupts_count?: number;
                    interrupts_duration_ms?: number;
                    interrupts?: ReturnType<typeof AudioSegmentBoundaries.prototype.toObject>[];
                } = {};
                if (this.speaker_tag != null) {
                    data.speaker_tag = this.speaker_tag;
                }
                if (this.interrupts_count != null) {
                    data.interrupts_count = this.interrupts_count;
                }
                if (this.interrupts_duration_ms != null) {
                    data.interrupts_duration_ms = this.interrupts_duration_ms;
                }
                if (this.interrupts != null) {
                    data.interrupts = this.interrupts.map((item: AudioSegmentBoundaries) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.speaker_tag.length)
                    writer.writeString(1, this.speaker_tag);
                if (this.interrupts_count != 0)
                    writer.writeInt64(2, this.interrupts_count);
                if (this.interrupts_duration_ms != 0)
                    writer.writeInt64(3, this.interrupts_duration_ms);
                if (this.interrupts.length)
                    writer.writeRepeatedMessage(4, this.interrupts, (item: AudioSegmentBoundaries) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InterruptsEvaluation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterruptsEvaluation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.speaker_tag = reader.readString();
                            break;
                        case 2:
                            message.interrupts_count = reader.readInt64();
                            break;
                        case 3:
                            message.interrupts_duration_ms = reader.readInt64();
                            break;
                        case 4:
                            reader.readMessage(message.interrupts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AudioSegmentBoundaries.deserialize(reader), AudioSegmentBoundaries));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InterruptsEvaluation {
                return InterruptsEvaluation.deserialize(bytes);
            }
        }
    }
    export class ContentUsage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            input_text_tokens?: number;
            completion_tokens?: number;
            total_tokens?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("input_text_tokens" in data && data.input_text_tokens != undefined) {
                    this.input_text_tokens = data.input_text_tokens;
                }
                if ("completion_tokens" in data && data.completion_tokens != undefined) {
                    this.completion_tokens = data.completion_tokens;
                }
                if ("total_tokens" in data && data.total_tokens != undefined) {
                    this.total_tokens = data.total_tokens;
                }
            }
        }
        get input_text_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set input_text_tokens(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get completion_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set completion_tokens(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get total_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set total_tokens(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            input_text_tokens?: number;
            completion_tokens?: number;
            total_tokens?: number;
        }): ContentUsage {
            const message = new ContentUsage({});
            if (data.input_text_tokens != null) {
                message.input_text_tokens = data.input_text_tokens;
            }
            if (data.completion_tokens != null) {
                message.completion_tokens = data.completion_tokens;
            }
            if (data.total_tokens != null) {
                message.total_tokens = data.total_tokens;
            }
            return message;
        }
        toObject() {
            const data: {
                input_text_tokens?: number;
                completion_tokens?: number;
                total_tokens?: number;
            } = {};
            if (this.input_text_tokens != null) {
                data.input_text_tokens = this.input_text_tokens;
            }
            if (this.completion_tokens != null) {
                data.completion_tokens = this.completion_tokens;
            }
            if (this.total_tokens != null) {
                data.total_tokens = this.total_tokens;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.input_text_tokens != 0)
                writer.writeInt64(1, this.input_text_tokens);
            if (this.completion_tokens != 0)
                writer.writeInt64(2, this.completion_tokens);
            if (this.total_tokens != 0)
                writer.writeInt64(3, this.total_tokens);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContentUsage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContentUsage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.input_text_tokens = reader.readInt64();
                        break;
                    case 2:
                        message.completion_tokens = reader.readInt64();
                        break;
                    case 3:
                        message.total_tokens = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContentUsage {
            return ContentUsage.deserialize(bytes);
        }
    }
    export class Summarization extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            results?: SummarizationPropertyResult[];
            content_usage?: ContentUsage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
                if ("content_usage" in data && data.content_usage != undefined) {
                    this.content_usage = data.content_usage;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, SummarizationPropertyResult, 1) as SummarizationPropertyResult[];
        }
        set results(value: SummarizationPropertyResult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get content_usage() {
            return pb_1.Message.getWrapperField(this, ContentUsage, 2) as ContentUsage;
        }
        set content_usage(value: ContentUsage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_content_usage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            results?: ReturnType<typeof SummarizationPropertyResult.prototype.toObject>[];
            content_usage?: ReturnType<typeof ContentUsage.prototype.toObject>;
        }): Summarization {
            const message = new Summarization({});
            if (data.results != null) {
                message.results = data.results.map(item => SummarizationPropertyResult.fromObject(item));
            }
            if (data.content_usage != null) {
                message.content_usage = ContentUsage.fromObject(data.content_usage);
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof SummarizationPropertyResult.prototype.toObject>[];
                content_usage?: ReturnType<typeof ContentUsage.prototype.toObject>;
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: SummarizationPropertyResult) => item.toObject());
            }
            if (this.content_usage != null) {
                data.content_usage = this.content_usage.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results.length)
                writer.writeRepeatedMessage(1, this.results, (item: SummarizationPropertyResult) => item.serialize(writer));
            if (this.has_content_usage)
                writer.writeMessage(2, this.content_usage, () => this.content_usage.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Summarization {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Summarization();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SummarizationPropertyResult.deserialize(reader), SummarizationPropertyResult));
                        break;
                    case 2:
                        reader.readMessage(message.content_usage, () => message.content_usage = ContentUsage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Summarization {
            return Summarization.deserialize(bytes);
        }
    }
    export class StreamingResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7, 8, 10, 11, 12, 13]];
        constructor(data?: any[] | ({
            session_uuid?: SessionUuid;
            audio_cursors?: AudioCursors;
            response_wall_time_ms?: number;
            channel_tag?: string;
        } & (({
            partial?: AlternativeUpdate;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: AlternativeUpdate;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: EouUpdate;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: FinalRefinement;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: StatusCode;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: RecognitionClassifierUpdate;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: SpeakerAnalysis;
            conversation_analysis?: never;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: ConversationAnalysis;
            summarization?: never;
        } | {
            partial?: never;
            final?: never;
            eou_update?: never;
            final_refinement?: never;
            status_code?: never;
            classifier_update?: never;
            speaker_analysis?: never;
            conversation_analysis?: never;
            summarization?: Summarization;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_uuid" in data && data.session_uuid != undefined) {
                    this.session_uuid = data.session_uuid;
                }
                if ("audio_cursors" in data && data.audio_cursors != undefined) {
                    this.audio_cursors = data.audio_cursors;
                }
                if ("response_wall_time_ms" in data && data.response_wall_time_ms != undefined) {
                    this.response_wall_time_ms = data.response_wall_time_ms;
                }
                if ("partial" in data && data.partial != undefined) {
                    this.partial = data.partial;
                }
                if ("final" in data && data.final != undefined) {
                    this.final = data.final;
                }
                if ("eou_update" in data && data.eou_update != undefined) {
                    this.eou_update = data.eou_update;
                }
                if ("final_refinement" in data && data.final_refinement != undefined) {
                    this.final_refinement = data.final_refinement;
                }
                if ("status_code" in data && data.status_code != undefined) {
                    this.status_code = data.status_code;
                }
                if ("classifier_update" in data && data.classifier_update != undefined) {
                    this.classifier_update = data.classifier_update;
                }
                if ("speaker_analysis" in data && data.speaker_analysis != undefined) {
                    this.speaker_analysis = data.speaker_analysis;
                }
                if ("conversation_analysis" in data && data.conversation_analysis != undefined) {
                    this.conversation_analysis = data.conversation_analysis;
                }
                if ("summarization" in data && data.summarization != undefined) {
                    this.summarization = data.summarization;
                }
                if ("channel_tag" in data && data.channel_tag != undefined) {
                    this.channel_tag = data.channel_tag;
                }
            }
        }
        get session_uuid() {
            return pb_1.Message.getWrapperField(this, SessionUuid, 1) as SessionUuid;
        }
        set session_uuid(value: SessionUuid) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_session_uuid() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get audio_cursors() {
            return pb_1.Message.getWrapperField(this, AudioCursors, 2) as AudioCursors;
        }
        set audio_cursors(value: AudioCursors) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_audio_cursors() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get response_wall_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set response_wall_time_ms(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get partial() {
            return pb_1.Message.getWrapperField(this, AlternativeUpdate, 4) as AlternativeUpdate;
        }
        set partial(value: AlternativeUpdate) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_partial() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get final() {
            return pb_1.Message.getWrapperField(this, AlternativeUpdate, 5) as AlternativeUpdate;
        }
        set final(value: AlternativeUpdate) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_final() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get eou_update() {
            return pb_1.Message.getWrapperField(this, EouUpdate, 6) as EouUpdate;
        }
        set eou_update(value: EouUpdate) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_eou_update() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get final_refinement() {
            return pb_1.Message.getWrapperField(this, FinalRefinement, 7) as FinalRefinement;
        }
        set final_refinement(value: FinalRefinement) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_final_refinement() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get status_code() {
            return pb_1.Message.getWrapperField(this, StatusCode, 8) as StatusCode;
        }
        set status_code(value: StatusCode) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_status_code() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get classifier_update() {
            return pb_1.Message.getWrapperField(this, RecognitionClassifierUpdate, 10) as RecognitionClassifierUpdate;
        }
        set classifier_update(value: RecognitionClassifierUpdate) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_classifier_update() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get speaker_analysis() {
            return pb_1.Message.getWrapperField(this, SpeakerAnalysis, 11) as SpeakerAnalysis;
        }
        set speaker_analysis(value: SpeakerAnalysis) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_speaker_analysis() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get conversation_analysis() {
            return pb_1.Message.getWrapperField(this, ConversationAnalysis, 12) as ConversationAnalysis;
        }
        set conversation_analysis(value: ConversationAnalysis) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_conversation_analysis() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get summarization() {
            return pb_1.Message.getWrapperField(this, Summarization, 13) as Summarization;
        }
        set summarization(value: Summarization) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_summarization() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get channel_tag() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set channel_tag(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get Event() {
            const cases: {
                [index: number]: "none" | "partial" | "final" | "eou_update" | "final_refinement" | "status_code" | "classifier_update" | "speaker_analysis" | "conversation_analysis" | "summarization";
            } = {
                0: "none",
                4: "partial",
                5: "final",
                6: "eou_update",
                7: "final_refinement",
                8: "status_code",
                10: "classifier_update",
                11: "speaker_analysis",
                12: "conversation_analysis",
                13: "summarization"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            session_uuid?: ReturnType<typeof SessionUuid.prototype.toObject>;
            audio_cursors?: ReturnType<typeof AudioCursors.prototype.toObject>;
            response_wall_time_ms?: number;
            partial?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
            final?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
            eou_update?: ReturnType<typeof EouUpdate.prototype.toObject>;
            final_refinement?: ReturnType<typeof FinalRefinement.prototype.toObject>;
            status_code?: ReturnType<typeof StatusCode.prototype.toObject>;
            classifier_update?: ReturnType<typeof RecognitionClassifierUpdate.prototype.toObject>;
            speaker_analysis?: ReturnType<typeof SpeakerAnalysis.prototype.toObject>;
            conversation_analysis?: ReturnType<typeof ConversationAnalysis.prototype.toObject>;
            summarization?: ReturnType<typeof Summarization.prototype.toObject>;
            channel_tag?: string;
        }): StreamingResponse {
            const message = new StreamingResponse({});
            if (data.session_uuid != null) {
                message.session_uuid = SessionUuid.fromObject(data.session_uuid);
            }
            if (data.audio_cursors != null) {
                message.audio_cursors = AudioCursors.fromObject(data.audio_cursors);
            }
            if (data.response_wall_time_ms != null) {
                message.response_wall_time_ms = data.response_wall_time_ms;
            }
            if (data.partial != null) {
                message.partial = AlternativeUpdate.fromObject(data.partial);
            }
            if (data.final != null) {
                message.final = AlternativeUpdate.fromObject(data.final);
            }
            if (data.eou_update != null) {
                message.eou_update = EouUpdate.fromObject(data.eou_update);
            }
            if (data.final_refinement != null) {
                message.final_refinement = FinalRefinement.fromObject(data.final_refinement);
            }
            if (data.status_code != null) {
                message.status_code = StatusCode.fromObject(data.status_code);
            }
            if (data.classifier_update != null) {
                message.classifier_update = RecognitionClassifierUpdate.fromObject(data.classifier_update);
            }
            if (data.speaker_analysis != null) {
                message.speaker_analysis = SpeakerAnalysis.fromObject(data.speaker_analysis);
            }
            if (data.conversation_analysis != null) {
                message.conversation_analysis = ConversationAnalysis.fromObject(data.conversation_analysis);
            }
            if (data.summarization != null) {
                message.summarization = Summarization.fromObject(data.summarization);
            }
            if (data.channel_tag != null) {
                message.channel_tag = data.channel_tag;
            }
            return message;
        }
        toObject() {
            const data: {
                session_uuid?: ReturnType<typeof SessionUuid.prototype.toObject>;
                audio_cursors?: ReturnType<typeof AudioCursors.prototype.toObject>;
                response_wall_time_ms?: number;
                partial?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
                final?: ReturnType<typeof AlternativeUpdate.prototype.toObject>;
                eou_update?: ReturnType<typeof EouUpdate.prototype.toObject>;
                final_refinement?: ReturnType<typeof FinalRefinement.prototype.toObject>;
                status_code?: ReturnType<typeof StatusCode.prototype.toObject>;
                classifier_update?: ReturnType<typeof RecognitionClassifierUpdate.prototype.toObject>;
                speaker_analysis?: ReturnType<typeof SpeakerAnalysis.prototype.toObject>;
                conversation_analysis?: ReturnType<typeof ConversationAnalysis.prototype.toObject>;
                summarization?: ReturnType<typeof Summarization.prototype.toObject>;
                channel_tag?: string;
            } = {};
            if (this.session_uuid != null) {
                data.session_uuid = this.session_uuid.toObject();
            }
            if (this.audio_cursors != null) {
                data.audio_cursors = this.audio_cursors.toObject();
            }
            if (this.response_wall_time_ms != null) {
                data.response_wall_time_ms = this.response_wall_time_ms;
            }
            if (this.partial != null) {
                data.partial = this.partial.toObject();
            }
            if (this.final != null) {
                data.final = this.final.toObject();
            }
            if (this.eou_update != null) {
                data.eou_update = this.eou_update.toObject();
            }
            if (this.final_refinement != null) {
                data.final_refinement = this.final_refinement.toObject();
            }
            if (this.status_code != null) {
                data.status_code = this.status_code.toObject();
            }
            if (this.classifier_update != null) {
                data.classifier_update = this.classifier_update.toObject();
            }
            if (this.speaker_analysis != null) {
                data.speaker_analysis = this.speaker_analysis.toObject();
            }
            if (this.conversation_analysis != null) {
                data.conversation_analysis = this.conversation_analysis.toObject();
            }
            if (this.summarization != null) {
                data.summarization = this.summarization.toObject();
            }
            if (this.channel_tag != null) {
                data.channel_tag = this.channel_tag;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session_uuid)
                writer.writeMessage(1, this.session_uuid, () => this.session_uuid.serialize(writer));
            if (this.has_audio_cursors)
                writer.writeMessage(2, this.audio_cursors, () => this.audio_cursors.serialize(writer));
            if (this.response_wall_time_ms != 0)
                writer.writeInt64(3, this.response_wall_time_ms);
            if (this.has_partial)
                writer.writeMessage(4, this.partial, () => this.partial.serialize(writer));
            if (this.has_final)
                writer.writeMessage(5, this.final, () => this.final.serialize(writer));
            if (this.has_eou_update)
                writer.writeMessage(6, this.eou_update, () => this.eou_update.serialize(writer));
            if (this.has_final_refinement)
                writer.writeMessage(7, this.final_refinement, () => this.final_refinement.serialize(writer));
            if (this.has_status_code)
                writer.writeMessage(8, this.status_code, () => this.status_code.serialize(writer));
            if (this.has_classifier_update)
                writer.writeMessage(10, this.classifier_update, () => this.classifier_update.serialize(writer));
            if (this.has_speaker_analysis)
                writer.writeMessage(11, this.speaker_analysis, () => this.speaker_analysis.serialize(writer));
            if (this.has_conversation_analysis)
                writer.writeMessage(12, this.conversation_analysis, () => this.conversation_analysis.serialize(writer));
            if (this.has_summarization)
                writer.writeMessage(13, this.summarization, () => this.summarization.serialize(writer));
            if (this.channel_tag.length)
                writer.writeString(9, this.channel_tag);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.session_uuid, () => message.session_uuid = SessionUuid.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.audio_cursors, () => message.audio_cursors = AudioCursors.deserialize(reader));
                        break;
                    case 3:
                        message.response_wall_time_ms = reader.readInt64();
                        break;
                    case 4:
                        reader.readMessage(message.partial, () => message.partial = AlternativeUpdate.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.final, () => message.final = AlternativeUpdate.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.eou_update, () => message.eou_update = EouUpdate.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.final_refinement, () => message.final_refinement = FinalRefinement.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.status_code, () => message.status_code = StatusCode.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.classifier_update, () => message.classifier_update = RecognitionClassifierUpdate.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.speaker_analysis, () => message.speaker_analysis = SpeakerAnalysis.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.conversation_analysis, () => message.conversation_analysis = ConversationAnalysis.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.summarization, () => message.summarization = Summarization.deserialize(reader));
                        break;
                    case 9:
                        message.channel_tag = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamingResponse {
            return StreamingResponse.deserialize(bytes);
        }
    }
    export class DeleteRecognitionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
            }
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            operation_id?: string;
        }): DeleteRecognitionRequest {
            const message = new DeleteRecognitionRequest({});
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_id?: string;
            } = {};
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_id.length)
                writer.writeString(1, this.operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecognitionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecognitionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecognitionRequest {
            return DeleteRecognitionRequest.deserialize(bytes);
        }
    }
    export class StreamingResponseList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            streaming_responses?: StreamingResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("streaming_responses" in data && data.streaming_responses != undefined) {
                    this.streaming_responses = data.streaming_responses;
                }
            }
        }
        get streaming_responses() {
            return pb_1.Message.getRepeatedWrapperField(this, StreamingResponse, 1) as StreamingResponse[];
        }
        set streaming_responses(value: StreamingResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            streaming_responses?: ReturnType<typeof StreamingResponse.prototype.toObject>[];
        }): StreamingResponseList {
            const message = new StreamingResponseList({});
            if (data.streaming_responses != null) {
                message.streaming_responses = data.streaming_responses.map(item => StreamingResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                streaming_responses?: ReturnType<typeof StreamingResponse.prototype.toObject>[];
            } = {};
            if (this.streaming_responses != null) {
                data.streaming_responses = this.streaming_responses.map((item: StreamingResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.streaming_responses.length)
                writer.writeRepeatedMessage(1, this.streaming_responses, (item: StreamingResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StreamingResponseList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StreamingResponseList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.streaming_responses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StreamingResponse.deserialize(reader), StreamingResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StreamingResponseList {
            return StreamingResponseList.deserialize(bytes);
        }
    }
}
