/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: stt_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./stt";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace speechkit.stt.v3 {
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class Operation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            done?: boolean;
            error?: string;
            response?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("done" in data && data.done != undefined) {
                    this.done = data.done;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get done() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set done(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set response(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            done?: boolean;
            error?: string;
            response?: Uint8Array;
        }): Operation {
            const message = new Operation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.done != null) {
                message.done = data.done;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.response != null) {
                message.response = data.response;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                done?: boolean;
                error?: string;
                response?: Uint8Array;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.done != null) {
                data.done = this.done;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.response != null) {
                data.response = this.response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.done != false)
                writer.writeBool(2, this.done);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (this.response.length)
                writer.writeBytes(4, this.response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Operation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Operation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.done = reader.readBool();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    case 4:
                        message.response = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Operation {
            return Operation.deserialize(bytes);
        }
    }
    export class HttpRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            post?: string;
            get?: string;
            delete?: string;
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("post" in data && data.post != undefined) {
                    this.post = data.post;
                }
                if ("get" in data && data.get != undefined) {
                    this.get = data.get;
                }
                if ("delete" in data && data.delete != undefined) {
                    this.delete = data.delete;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get post() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set post(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get get() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set get(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get delete() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set delete(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            post?: string;
            get?: string;
            delete?: string;
            body?: string;
        }): HttpRule {
            const message = new HttpRule({});
            if (data.post != null) {
                message.post = data.post;
            }
            if (data.get != null) {
                message.get = data.get;
            }
            if (data.delete != null) {
                message.delete = data.delete;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                post?: string;
                get?: string;
                delete?: string;
                body?: string;
            } = {};
            if (this.post != null) {
                data.post = this.post;
            }
            if (this.get != null) {
                data.get = this.get;
            }
            if (this.delete != null) {
                data.delete = this.delete;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.post.length)
                writer.writeString(1, this.post);
            if (this.get.length)
                writer.writeString(2, this.get);
            if (this.delete.length)
                writer.writeString(3, this.delete);
            if (this.body.length)
                writer.writeString(4, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HttpRule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HttpRule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.post = reader.readString();
                        break;
                    case 2:
                        message.get = reader.readString();
                        break;
                    case 3:
                        message.delete = reader.readString();
                        break;
                    case 4:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HttpRule {
            return HttpRule.deserialize(bytes);
        }
    }
    export class OperationRule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            response?: string;
        }): OperationRule {
            const message = new OperationRule({});
            if (data.response != null) {
                message.response = data.response;
            }
            return message;
        }
        toObject() {
            const data: {
                response?: string;
            } = {};
            if (this.response != null) {
                data.response = this.response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.response.length)
                writer.writeString(1, this.response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OperationRule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OperationRule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.response = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OperationRule {
            return OperationRule.deserialize(bytes);
        }
    }
    export class GetRecognitionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation_id" in data && data.operation_id != undefined) {
                    this.operation_id = data.operation_id;
                }
            }
        }
        get operation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set operation_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            operation_id?: string;
        }): GetRecognitionRequest {
            const message = new GetRecognitionRequest({});
            if (data.operation_id != null) {
                message.operation_id = data.operation_id;
            }
            return message;
        }
        toObject() {
            const data: {
                operation_id?: string;
            } = {};
            if (this.operation_id != null) {
                data.operation_id = this.operation_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation_id.length)
                writer.writeString(1, this.operation_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecognitionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecognitionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecognitionRequest {
            return GetRecognitionRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRecognizerService {
        static definition = {
            RecognizeStreaming: {
                path: "/speechkit.stt.v3.Recognizer/RecognizeStreaming",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: dependency_1.speechkit.stt.v3.StreamingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.speechkit.stt.v3.StreamingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.speechkit.stt.v3.StreamingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.speechkit.stt.v3.StreamingResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RecognizeStreaming(call: grpc_1.ServerDuplexStream<dependency_1.speechkit.stt.v3.StreamingRequest, dependency_1.speechkit.stt.v3.StreamingResponse>): void;
    }
    export class RecognizerClient extends grpc_1.makeGenericClientConstructor(UnimplementedRecognizerService.definition, "Recognizer", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RecognizeStreaming: GrpcChunkServiceInterface<dependency_1.speechkit.stt.v3.StreamingRequest, dependency_1.speechkit.stt.v3.StreamingResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<dependency_1.speechkit.stt.v3.StreamingRequest, dependency_1.speechkit.stt.v3.StreamingResponse> => {
            return super.RecognizeStreaming(metadata, options);
        };
    }
    export abstract class UnimplementedAsyncRecognizerService {
        static definition = {
            RecognizeFile: {
                path: "/speechkit.stt.v3.AsyncRecognizer/RecognizeFile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.speechkit.stt.v3.RecognizeFileRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.speechkit.stt.v3.RecognizeFileRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Operation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Operation.deserialize(new Uint8Array(bytes))
            },
            GetRecognition: {
                path: "/speechkit.stt.v3.AsyncRecognizer/GetRecognition",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetRecognitionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRecognitionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.speechkit.stt.v3.StreamingResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.speechkit.stt.v3.StreamingResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteRecognition: {
                path: "/speechkit.stt.v3.AsyncRecognizer/DeleteRecognition",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.speechkit.stt.v3.DeleteRecognitionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.speechkit.stt.v3.DeleteRecognitionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RecognizeFile(call: grpc_1.ServerUnaryCall<dependency_1.speechkit.stt.v3.RecognizeFileRequest, Operation>, callback: grpc_1.sendUnaryData<Operation>): void;
        abstract GetRecognition(call: grpc_1.ServerWritableStream<GetRecognitionRequest, dependency_1.speechkit.stt.v3.StreamingResponse>): void;
        abstract DeleteRecognition(call: grpc_1.ServerUnaryCall<dependency_1.speechkit.stt.v3.DeleteRecognitionRequest, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
    }
    export class AsyncRecognizerClient extends grpc_1.makeGenericClientConstructor(UnimplementedAsyncRecognizerService.definition, "AsyncRecognizer", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RecognizeFile: GrpcUnaryServiceInterface<dependency_1.speechkit.stt.v3.RecognizeFileRequest, Operation> = (message: dependency_1.speechkit.stt.v3.RecognizeFileRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Operation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Operation>, callback?: grpc_1.requestCallback<Operation>): grpc_1.ClientUnaryCall => {
            return super.RecognizeFile(message, metadata, options, callback);
        };
        GetRecognition: GrpcStreamServiceInterface<GetRecognitionRequest, dependency_1.speechkit.stt.v3.StreamingResponse> = (message: GetRecognitionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_1.speechkit.stt.v3.StreamingResponse> => {
            return super.GetRecognition(message, metadata, options);
        };
        DeleteRecognition: GrpcUnaryServiceInterface<dependency_1.speechkit.stt.v3.DeleteRecognitionRequest, Empty> = (message: dependency_1.speechkit.stt.v3.DeleteRecognitionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
            return super.DeleteRecognition(message, metadata, options, callback);
        };
    }
}
